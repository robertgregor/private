'spinace RA0 - RA5 , RE0 - RE2
'Alarm vstupy rb0 - rb7
'rolety rc0
'io home control rc1 ' serout
'io home control rc2 ' serin
'led             rd1
'siren relay     rd0
'Bluetooth AT+NAMEname
'          AT+PINpin
'          AT+BAUD8 115200

'CONFIG FOSC = HSHP
'CONFIG PLLCFG = ON
'CONFIG WDTEN = ON
'CONFIG WDTPS = 128
'CONFIG PBADEN = OFF
'CONFIG MCLRE = EXTMCLR

DEFINE OSC 64
DEFINE DEBUG_REG	PORTC
DEFINE DEBUG_BIT	0
DEFINE DEBUG_BAUD	9500
DEFINE DEBUG_MODE	0
DEFINE DEBUG_PACING 1000

'Include "SDFSR.PBP"

'define	LOADER_USED	1
DEFINE HSER2_RCSTA 90h
DEFINE HSER2_TXSTA 20h
DEFINE HSER2_BAUD 115200
DEFINE HSER2_CLROERR 1
DEFINE HSER_RCSTA 90h
DEFINE HSER_TXSTA 20h
DEFINE HSER_BAUD 115200
DEFINE HSER_CLROERR 1
' 0    - pin[0]
' 1    - pin[1]
' 2    - pin[2]
' 3    - pin[3]
EEPROM  0, [0,0,0,0,0,0,0,0,0,32,99,111,110,116,114,111]
EEPROM 16, [108,108,101,114,$7F,255,255,255,255,255,255,255,255,255,255,255]

SYMBOL ACTIVITY_LED = PORTD.1

'variables for timer
day             VAR     BYTE    ' Define day in the week
hour            var     byte    ' Define hour variable
minute          var     byte    ' Define minute variable
second          var     byte    ' Define second variable
ticks           var     WORD    ' Define pieces of seconds variable
manageintminute VAR     BYTE
manageintsecond VAR     BYTE
manageint500ms  VAR     BYTE
manageSerial    VAR     BYTE
command         var     byte[255]
pinn            var     byte[4]
temp_byte       VAR     BYTE
temp_word       VAR     word
temp1_byte      VAR     BYTE
temp2_byte      VAR     BYTE
temp3_byte      VAR     BYTE
temp_byte_int   var     byte
temp_byte_array VAR     BYTE[8]
i               var     BYTE
k               var     BYTE
ip              VAR     BYTE
pinwrongCounter VAR     BYTE
powerCounter    VAR     BYTE[9]
portBpreviousState vaR byte
EEPROMBYTE      VAR BYTE
EEPROMBYTEREAD  VAR BYTE
EEPROMPOSITION  VAR BYTE
ei              var byte


read 0, pinn[0]
read 1, pinn[1]
read 2, pinn[2]
read 3, pinn[3]

clear

'interrupt for timer
ADCON0 = $00
ADCON1 = $00
ANSELA = 0
ANSELB = 0
ANSELC = 0
ANSELD = 0
ANSELE = 0
INTCON = %11100000
INTCON2 = INTCON2 or %100
INTCON3 = 0
T0CON = %10010110
PIE1 = %00100000
PIE2 = 0
PIE3 = %00100000
PIE4 = 0
RCON.7 = 0
output PORTA.0
output PORTA.1
output PORTA.2
output PORTA.3
output PORTA.4
output PORTA.5
output PORTE.0
output PORTE.1
output PORTE.2
output PORTC.0
output PORTC.1
output PORTC.2
output PORTC.3
output PORTC.4
output PORTC.5
output PORTD.0
output PORTD.1
output PORTD.2
output PORTD.3
input PORTB.0
input PORTB.1
input PORTB.2
input PORTB.3
input PORTB.4
input PORTB.5
input PORTB.6
input PORTB.7
low PORTA.0
low PORTA.1
low PORTA.2
low PORTA.3
low PORTA.4
low PORTA.5
low PORTE.0
low PORTE.1
low PORTE.2
low PORTC.0
low PORTC.1
low PORTC.2
low PORTC.3
low PORTC.4
low PORTC.5
low PORTD.0
low PORTD.1
low PORTD.2
low PORTD.3

on interrupt goto intManagement
portBpreviousState = PORTB
while 1
        ASM
           CLRWDT
        ENDASM
        if (manageint500ms == 1) then
            manageint500ms = 0
            temp_byte = PORTB
            if (portBpreviousState <> temp_byte) THEN 
                hserouT["A|",deC temp_byte,"|",DEC portBpreviousState,13,10]
                portBpreviousState = temp_byte
            endif 
        endif
        if (manageintsecond == 1) then
            manageintsecond = 0
            toggle ACTIVITY_LED
            second = second + 1
            If second >= 60 Then
                 second = 0
                 manageIntMinute = 1
            ENDIF
            if pinwrongcounter > 0 then
                pinwrongcounter = pinwrongcounter - 1
            endif
        endif
        if (manageintminute == 1) then
            manageintminute = 0
            minute = minute + 1
            If minute >= 60 Then
                minute = 0
                hour = hour + 1
                If hour >= 24 Then
                    hour = 0
                    day = day + 1
                    if day >= 7 THEN day = 0
                Endif
            Endif
            for i=0 to 8
                if (powerCounter[i] > 0) then
                    powerCounter[i] = powerCounter[i] - 1
                    if (powerCounter[i] == 0) then
                        if i==0 then 
                            low PORTA.0
                        endif
                        if i==1 then 
                            low PORTA.1
                        endif
                        if i==2 then 
                            low PORTA.2
                        endif
                        if i==3 then 
                            low PORTA.3
                        endif
                        if i==4 then 
                            low PORTA.4
                        endif
                        if i==5 then 
                            low PORTA.5
                        endif
                        if i==6 then 
                            low PORTE.0
                        endif
                        if i==7 then 
                            low PORTE.1
                        endif
                        if i==8 then 
                            low PORTE.2
                        endif
                    endif
                endif
            next i
        endif
        if (manageSerial == 1) THEN
            gosub manageHTTP
            COMMAND[0] = 0
            gosub cleanSerialPort
            manageSerial = 0
        endif
:main
wend
end

disable
intManagement:
        if (INTCON.2 == 1) then
           ticks = ticks + 1      ' Count pieces of seconds
                manageint500ms = 1
           If ticks < 2 Then tiexit
           manageintsecond = 1
           ticks = 0
           tiexit: 
           INTCON.2 = 0
        else 
            if (PIR1.5 == 1) then
                 if (manageSerial == 1) then mainInt
                 if (RCSTA.2 == 1) then
                    hserin[temp_byte_int]
                 endif
                 HSERIN 100, mainInt, [wait ("GET /"), STR COMMAND\255\47]
                 gosub cleanSerialPort
                 manageSerial = 1
                 :mainInt
            ENDIF
            if (PIR3.5 == 1) then
                 if (manageSerial == 1) then mainInt2
                 if (RCSTA2.2 == 1) then
                    hserin2[temp_byte_int]
                 endif
                 HSERIN2 100, mainInt2, [wait ("GET /"), STR COMMAND\255\47]
                 gosub cleanSerialPort
                 manageSerial = 1
                 :mainInt2
            endif
        endif
        INTCON.7 = 1
resume
enable

manageHTTP:
         if command[0] == 0 THen RETURN
         if manageSerial <> 1 then RETURN 
         if command[0] == " " THEN
            GOSUB sendHttpAnswer
            hserout ["Welcome to home controller v 1.0"]
            GOSUB sendHttpAnswerEnd
            return
         endif
         if command[0] == "!" THEN
            'print current pin
            GOSUB sendHttpAnswer
            hserout [DEC pinn[0],DEC pinn[1],DEC pinn[2],DEC pinn[3]]
            GOSUB sendHttpAnswerEnd
            return
         endif         
         'check the PIN
         for i = 1 to 4
             temp2_byte = COMMAND[i]
             temp1_byte = 255
             GOSUB lookupChar
             COMMAND[i] = temp1_byte             
         next i
         if pinn[0] <> COMMAND[1] or pinn[1] <> COMMAND[2] or pinn[2] <> COMMAND[3] or pinn[3] <> COMMAND[4] OR pinwrongCounter <> 0 then
            IF (pinwrongCounter <> 0) THEN
                GOSUB printPinWrongTimerNotMinute
            ELSE
                pinwrongCounter = 120
                GOSUB printPinWrong
            ENDIF
         else
            GOSUB sendHttpAnswer
            gosub manageHttpCommand
            if command[0] <> "n" then
                if command[0] <> "a" then
                    HSEROUT ["OK"]
                endif
                GOSUB sendHttpAnswerEnd
            endif
         endif
      gosub cleanSerialPort
return
lookupChar:
    LOOKDOWN temp2_byte,["0123456789ABCDEF"], temp1_byte
RETURN

writeEeprom:
for ei = 0 to 10
    WRITE EEPROMPOSITION, EEPROMBYTE
    READ EEPROMPOSITION, EEPROMBYTEREAD
    if (EEPROMBYTE == EEPROMBYTEREAD) then RETURN 
next ei
RETURN

printEeprom: 
    READ EEPROMPOSITION, EEPROMBYTEREAD
    if EEPROMBYTEREAD != $7F then
        hserout[EEPROMBYTEREAD]
        EEPROMPOSITION = EEPROMPOSITION + 1     
        if EEPROMPOSITION != 0 then goto printEeprom
    endif
RETURN

printPinWrong:
    GOSUB sendHttpAnswer500
    HSEROUT ["PIN is wrong."]
    GOSUB sendHttpAnswerEnd
return
printPinWrongTimerNotMinute:
    GOSUB sendHttpAnswer501
    HSEROUT ["Pin wrong, wait one minute."]
    GOSUB sendHttpAnswerEnd
return
sendHttp200:
    Hserout ["HTTP/1.0 200 OK", 13, 10]
return
sendHttp500:
    Hserout ["HTTP/1.0 500 Unauthorized", 13, 10]
return
sendHttp501:
    Hserout ["HTTP/1.0 501 Wait two minutes", 13, 10]
return
sendHttpAnswerOnlyHeaders:
    Hserout ["Content-Type: text/html", 13, 10, "Connection: close", 13, 10, 13, 10]
return
sendHttpAnswerHeaders:
    gosub sendHttpAnswerOnlyHeaders
    Hserout ["<HTML><BODY>"]
return
' Send http answer
sendHttpAnswer:
    gosub sendHttp200
    gosub sendHttpAnswerHeaders
return
sendHttpAnswer500:
    gosub sendHttp500
    gosub sendHttpAnswerHeaders
return
sendHttpAnswer501:
    gosub sendHttp501
    gosub sendHttpAnswerHeaders
return
sendHttpAnswerEnd:
    HSEROUT ["</BODY></HTML>",13,10]
return

cleanInputBuffers:
    for i=0 to 255
        COMMAND[i] = 0
    next i
return

cleanSerialPort:
    while (PIR1.5==1) 
        hserin [temp_byte]
    wend
    while (PIR3.5==1) 
        hserin2 [temp_byte]
    wend
return

convertInputData:
    TEMP1_BYTE = 0
    TEMP2_BYTE = COMMAND[i+2]
    GOSUB lookupChar
    TEMP_BYTE = TEMP1_BYTE
    TEMP1_BYTE = "a"
    TEMP2_BYTE = COMMAND[i+3]
    GOSUB lookupChar
    if TEMP1_BYTE <> "a" then 
        TEMP_BYTE = TEMP_BYTE*10 + TEMP1_BYTE
    else
        return
    endif
    TEMP1_BYTE = "a"
    TEMP2_BYTE = COMMAND[i+4]
    GOSUB lookupChar    
    if TEMP1_BYTE <> "a" then 
        TEMP_BYTE = TEMP_BYTE*10 + TEMP1_BYTE
    endif
return

managePortCounter:
    for i=0 TO 8
        if (temp_byte_array[i] > 0) THEN
            temp_byte_array[i] = temp_byte_array[i] - 1
            if (temp_byte_array[i] == 0) then
                if (TEMP_BYTE == 1) then
                    PORTA.0 = 0
                endif
            endif
        ENDIF
    NEXT i
ReTURN
manageHttpCommand:
         if command[0] == "a" THEN
            HSEROUT["S|",DEC pinn[0],DEC pinn[1],DEC pinn[2],DEC pinn[3],"|",DEC PORTB,"|",DEC hour,":",DEC minute,":",DEC second,"|",DEC day,13,10]
         endif
         if command[0] == "b" THEN ' high power a=pin, b=timeout_minute get /0000a?a=1&b=250
            temp_byte = 0
            for i=0 to 30
                if COMMAND[i] == "a" then
                    GOSUB convertInputData
                    temp3_byte = TEMP_BYTE
                endif
                if COMMAND[i] == "b" then
                    GOSUB convertInputData
                endif
            next i
            if TEMP3_BYTE==0 then 
                high PORTA.0
            endif
            if TEMP3_BYTE==1 then 
                high PORTA.1
            endif
            if TEMP3_BYTE==2 then 
                high PORTA.2
            endif
            if TEMP3_BYTE==3 then 
                high PORTA.3
            endif
            if TEMP3_BYTE==4 then 
                high PORTA.4
            endif
            if TEMP3_BYTE==5 then 
                high PORTA.5
            endif
            if TEMP3_BYTE==6 then 
                high PORTE.0
            endif
            if TEMP3_BYTE==7 then 
                high PORTE.1
            endif
            if TEMP3_BYTE==8 then 
                high PORTE.2
            endif
            powerCounter[temp3_byte] = temp_byte
            return
         endif   
         if command[0] == "c" THEN ' low power a=pin /0000a?a=1
            for i=0 to 30
                if COMMAND[i] == "a" then 
                    gosub convertInputData
                    if TEMP_BYTE==0 then 
                        low PORTA.0
                    endif
                    if TEMP_BYTE==1 then 
                        low PORTA.1
                    endif
                    if TEMP_BYTE==2 then 
                        low PORTA.2
                    endif
                    if TEMP_BYTE==3 then 
                        low PORTA.3
                    endif
                    if TEMP_BYTE==4 then 
                        low PORTA.4
                    endif
                    if TEMP_BYTE==5 then 
                        low PORTA.5
                    endif
                    if TEMP_BYTE==6 then 
                        low PORTE.0
                    endif
                    if TEMP_BYTE==7 then 
                        low PORTE.1
                    endif
                    if TEMP_BYTE==8 then 
                        low PORTE.2
                    endif
                    powerCounter[temp_byte] = 0
                    return
                endif
            next i
         endif   
         if (command[0] >= "1") and (command[0] <= "9") THEN ' rolety "1" az "9"
            DEBUG "GET /"
            for i=0 to 30
                DEBUG command[i] 'serout PORTC.0, 2, [command[i]]
                if (command[i] == " ") then goto afterRolety
            next i
            :afterRolety
            debug "HTTP/1.0"
            DEBUG 10
            LOW PORTC.0
         endif         
         if command[0] == "e" THEN ' io homecontrol m-middle,u-up,d-down,l-left,r-right,s-softup,v-softdown,p-pause e.g. GET /e0000udlrsv
            serout PORTC.2,2,["GET /"]
            for i=0 to 80
                serout PORTC.2,2,[command[i]]
                if (command[i] == " ") then goto afterIOHome
            next i
            :afterIOHome
            serout PORTC.2,2,["HTTP/1.0",10]
            serin2 PORTC.1,2,20000,ioend,[temp_byte]
            :ioend
         endif
         if command[0] == "l" THEN ' siren on
            high PORTD.0
         endif
         if command[0] == "m" THEN ' siren off
            LOW PORTD.0
         endif
         if command[0] == "n" THEN ' set bluetooth
            HSEROUT ["OK"]
            GOSUB sendHttpAnswerEnd
            for k=0 TO 20
                gosub pause100
            next k
            for i=5 TO 105
                if command[i]==" " THEN goto exitloop1
                HSEROUT [command[i]]
            next i
            :exitloop1
            gosub pause100
            gosub pause100
            GOSUB cleanSerialPort
         endif
         if COMMAND[0] == "o" THEN 'Set pin form
             for i=0 to 21
                if COMMAND[i] == "a" then
                    GOSUB convertInputData
                    pinn[0] = TEMP_BYTE
                endif
                if COMMAND[i] == "b" then
                    GOSUB convertInputData
                    pinn[1] = TEMP_BYTE
                endif
                if COMMAND[i] == "c" then
                    GOSUB convertInputData
                    pinn[2] = TEMP_BYTE
                endif
                if COMMAND[i] == "d" then
                    GOSUB convertInputData
                    pinn[3] = TEMP_BYTE
                endif
             next i
             for i=0 to 3
                EEPROMPOSITION = i
                EEPROMBYTE = pinn[i]
                GOSUB writeEeprom
             next i
         endif
         if COMMAND[0] == "p" THEN 'Set time form
             for i=0 to 30
                if COMMAND[i] == "a" then
                    GOSUB convertInputData
                    hour = TEMP_BYTE
                endif
                if COMMAND[i] == "b" then
                    GOSUB convertInputData
                    minute = TEMP_BYTE
                endif
                if COMMAND[i] == "c" then
                    GOSUB convertInputData
                    second = TEMP_BYTE
                endif
                if COMMAND[i] == "d" then
                    GOSUB convertInputData
                    day = TEMP_BYTE
                endif
             next i
         endif         
return

:pause100
    for ip=0 to 200
        pause 1
    next ip 
return
