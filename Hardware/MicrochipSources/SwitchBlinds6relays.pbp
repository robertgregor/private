'@  __config _INTRC_OSC_NOCLKOUT & _WDT_ON & _MCLRE_OFF & _CP_OFF & _CPD_OFF & _FCMEN_OFF & _IESO_OFF & _BOR_ON & _PWRTE_ON
                 
@ DEVICE PIC16F690,INTRC_OSC_NOCLKOUT
@ DEVICE PIC16F690,WDT_ON
@ DEVICE PIC16F690,MCLR_OFF
@ DEVICE PIC16F690,CPD_OFF
@ DEVICE PIC16F690,BOD_ON
@ DEVICE PIC16F690,PWRT_ON

'EEPROM_MAP
'0 - channel number
'1,2,3,4,5 bank name
'6 device id

EEPROM  0, [40,"R","O","B","I","K",0,0,0,0,0,0,0,0,0,0]

INCLUDE "RFM70.pbp"

 DEFINE OSC 8

 OSCCON = %01110000 ' Internal 8MHz osc
 ANSEL = 0
 ANSELH = 0
 CM1CON0 = 0
 CM2CON0 = 0
 
 'interrupt for timer
    INTCON = %10100000  'T01 enabled PEIE disabled.
    PIE1 = %00000000    'USART disabled
    OPTION_REG = %00000111

on interrupt goto intManagement
ENABLE
'-----------init----------------------------------------------------------------
TRISA = %00000000 'Set PORTA to all output
TRISB = %00010000 'Set , SDI input
TRISC = %00000100 'Set IRQ input, 

RELAY1_DOWN VAR PORTA.5
RELAY1_UP VAR PORTA.4
RELAY2_DOWN VAR PORTC.6
RELAY2_UP VAR PORTC.5
RELAY3_DOWN VAR PORTC.4
RELAY3_UP VAR PORTC.3

i VAR BYTE 'loop counter
j var byte
ci var byte
configure var byte
temp_byte_int var byte
temp_byte var byte
temp1_byte var byte
temp2_byte var byte
temp3_byte var byte
temp_word var word
temp2_word var word
temp3_word var word
EEPROMBYTE      VAR BYTE
EEPROMPOSITION  VAR BYTE
seconds  var     byte    ' Define second variable
ticks   var     byte    ' Define pieces of seconds variable
counter1 var word
initial1Counter var word
initial1Percent var byte
counter2 var word
initial2Counter var word
initial2Percent var byte
counter3 var word
initial3Counter var word
initial3Percent var byte
conversionSuccess VAR BYTE
timeout1_value var word
current1Counter var byte
current1Direction var byte
timeout2_value var word
current2Counter var byte
current2Direction var byte
timeout3_value var word
current3Counter var byte
current3Direction var byte

clear
read 6, device_id
read 7, timeout1_value
timeout1_value = timeout1_value * 30


if 0 == 1 then
    write 0, 40
    write 1, "R"
    write 2, "O"
    write 3, "B"
    write 4, "I"
    write 5, "K"
    write 6, 0
    write 7, 0
    END
endif

output RELAY1_DOWN
output RELAY1_UP
output RELAY2_DOWN
output RELAY2_UP
output RELAY3_DOWN
output RELAY3_UP
gosub initModule

commonSettings:
gosub commonRXTX

'============Main Rx============================================================
Main_rx:
gosub setup_rx 'setup Rx
pause 2 'delay for Rx starting
Ce=1 'set nRF24L01 in Rx mode
irqLoop:
'Check for data to send
if (temp_data[0] != 0) then
    if (configure == 1) then
        gosub commonRXTX
        configure = 0
    endif
    gosub sendData
    temp_data[0] = 0
    GOTO main_rx
endif
If Irq !=0 then irqLoop 'wait until IRQ, active low
Ce=0
lop:
data_out[0]=rd_rx_pload 'Read 5 bytes Rx pload
num_byte=payloadLength
gosub spi_read
temp_data[0] = 0
if (data_in[1] == device_id) then
    if (data_in[2] == "c") then    
        if (data_in[3] == "=") then
            'OK it is configure
            write 0, data_in[9] 'channel
            write 1, data_in[4] 'password 0
            write 2, data_in[5] 'password 1
            write 3, data_in[6] 'password 2
            write 4, data_in[7] 'password 3
            write 5, data_in[8] 'password 4
            write 6, data_in[10]'device id
            device_id = data_in[10]
            pause 10
            configure = 1
            gosub sendDataOK
        endif
    elseif (data_in[2] == "b") then
        if (data_in[3] == "t") then
            if (data_in[4] == "=") then
                i = 5
                gosub convertInputData
                if (conversionSuccess == 1) then
                     write 7, temp_byte
                     timeout1_value = temp_byte * 30
                     gosub sendDataOK
                endif                                   
            endif
        elseif (timeout1_value == 0) then
            'timeout not set send error
        elseif (data_in[3] == "d") then
            counter1 = timeout1_value
            initial1counter = counter1
            gosub blinds1Down
            initial1Percent = current1Counter
            current1Counter = 100
            gosub sendDataOK
        elseif (data_in[3] == "u") then
            counter1 = timeout1_value
            initial1Counter = counter1
            gosub blinds1up
            initial1Percent = current1Counter            
            current1Counter = 0
            gosub sendDataOK
        elseif (data_in[3] == "m") then
            if (data_in[4] == "=") then
                i = 5
                gosub convertInputData
                if (conversionSuccess == 1) then
                  if (temp_byte < 101) then
                    if (temp_byte == current1Counter) then
                        gosub sendDataOK
                        counter1 = 4
                    elseif (temp_byte > current1Counter) then
                        temp2_byte = temp_byte - current1Counter
                        initial1Percent = current1Counter
                        gosub compute1Counter
                        initial1Counter = counter1
                        gosub blinds1Down
                        current1Counter = temp_byte
                        gosub sendDataOK
                    else
                        temp2_byte = current1Counter - temp_byte
                        initial1Percent = current1Counter
                        gosub compute1Counter
                        initial1Counter = counter1
                        gosub blinds1Up
                        current1Counter = temp_byte
                        gosub sendDataOK
                    endif
                  endif  
                endif                                                   
            endif
        elseif (data_in[3] == "s") then
            if (data_in[4] == "1")then
                if (current1Direction != 0) then
                    temp_word = initial1Counter - counter1
                    disable
                    temp_word = temp_word * 100
                    temp2_word = DIV32 timeout1_value
                    enable
                    if (current1Direction == 1) then
                        temp3_word = initial1Percent + temp2_word
                        if (temp3_word > 100 ) then temp3_word = 100
                        current1Counter = temp3_word
                    elseif (current1Direction == 2) then
                        if (initial1Percent > temp2_word) then
                            current1Counter = initial1Percent - temp2_word
                        else
                            current1Counter = 0
                        endif
                    endif
                    gosub sendDataOK
                    counter1 = 4
                else
                    gosub sendDataOK            
                    counter1 = 4
                endif
            elseif (data_in[4] == "2")then
                if (current2Direction != 0) then
                    temp_word = initial2Counter - counter2
                    disable
                    temp_word = temp_word * 100
                    temp2_word = DIV32 timeout2_value
                    enable
                    if (current2Direction == 1) then
                        temp3_word = initial2Percent + temp2_word
                        if (temp3_word > 100 ) then temp3_word = 100
                        current2Counter = temp3_word
                    elseif (current2Direction == 2) then
                        if (initial2Percent > temp2_word) then
                            current2Counter = initial2Percent - temp2_word
                        else
                            current2Counter = 0
                        endif
                    endif
                    gosub sendDataOK
                    counter2 = 4
                else
                    gosub sendDataOK            
                    counter2 = 4
                endif
            elseif (data_in[4] == "3")then
                if (current1Direction != 0) then
                    temp_word = initial3Counter - counter3
                    disable
                    temp_word = temp_word * 100
                    temp2_word = DIV32 timeout3_value
                    enable
                    if (current3Direction == 1) then
                        temp3_word = initial3Percent + temp2_word
                        if (temp3_word > 100 ) then temp3_word = 100
                        current3Counter = temp3_word
                    elseif (current3Direction == 2) then
                        if (initial3Percent > temp2_word) then
                            current3Counter = initial3Percent - temp2_word
                        else
                            current3Counter = 0
                        endif
                    endif
                    gosub sendDataOK
                    counter3 = 4
                else
                    gosub sendDataOK            
                    counter3 = 4
                endif
            endif
        endif
    elseif (data_in[2] == "s") then
            temp_data[0] = "5"
            temp_data[1] = "|"
            temp_data[2] = RELAY1_DOWN + $30
            temp_data[3] = RELAY1_UP + $30
            temp_data[4] = RELAY2_DOWN + $30
            temp_data[5] = RELAY2_UP + $30
            temp_data[6] = RELAY3_DOWN + $30
            temp_data[7] = RELAY3_UP + $30
            temp_data[8] = "|"            
            temp_byte = timeout1_value / 30
            gosub convertNoToStr
            temp_data[9] = temp3_byte
            temp_data[10] = temp2_byte
            temp_data[11] = temp1_byte
            temp_data[12] = "|"            
            temp_byte = current1Counter
            gosub convertNoToStr
            temp_data[13] = temp3_byte
            temp_data[14] = temp2_byte
            temp_data[15] = temp1_byte
            temp_data[16] = 13    
            temp_data[17] = 10    
    elseif (data_in[2] == "p") then
            if (data_in[3] == "n") then
                gosub sendDataOK
            endif
    elseif (data_in[2] == "u") then
        gosub blinds1Up
        gosub sendDataOK        
    elseif (data_in[2] == "d") then
        gosub blinds1Down
        gosub sendDataOK
    elseif (data_in[2] == "e") then
        gosub stopBlinds1Silent
        gosub sendDataOK
    endif
    if (temp_data[0] == 0) then
        temp_data[0] = "E"
        temp_data[1] = "R"
        temp_data[2] = "R"
        temp_data[3] = "O"
        temp_data[4] = "R"
        temp_data[5] = 10
    endif
endif

data_out[0]=Fifo_status 'Read FIFO status
num_byte=1
gosub spi_read
val= data_in[1] 'FIFO status register
if val.0=0 then lop 'test RX_EMPTY=1, RX_FIFO empty
data_out[0]=Write_reg+Stat_us 'reset RX_DR status bit
data_out[1]=%01000000 'write 1 tp RX_DR to reset IRQ
num_byte=1
gosub spi_write
pause 2 'wait 2ms Rx<->Tx
GOTO Main_rx
end

disable
intManagement:
        if (INTCON.2 == 1) then
           ticks = ticks + 1      ' Count pieces of seconds
           if (counter1 > 0) then
               counter1 = counter1 - 1
               if (counter1 == 0) then
                    GOSUB stopBlinds1
               endif
           endif
           if (counter2 > 0) then
               counter2 = counter2 - 1
               if (counter2 == 0) then
                    GOSUB stopBlinds2
               endif
           endif
           if (counter3 > 0) then
               counter3 = counter3 - 1
               if (counter3 == 0) then
                    GOSUB stopBlinds3
               endif
           endif
           If ticks < 31 Then tiexit
           ticks = 0
           seconds = seconds + 1
           if seconds <= 58 then tiexit
           seconds = 0
           tiexit: 
           INTCON.2 = 0
        endif
        INTCON.7 = 1
resume
enable

stopBlinds1:
    low RELAY1_DOWN
    low RELAY1_UP
    gosub sendCurrentPosition
    current1Direction = 0
return

stopBlinds1Silent:
    low RELAY1_DOWN
    low RELAY1_UP
    current1Direction = 0
return

blinds1Up:
    gosub stopBlinds1Silent
    pause 100
    high RELAY1_DOWN
    low RELAY1_UP
    current1Direction = 2
return

blinds1Down:
    gosub stopBlinds1Silent
    pause 100
    LOW RELAY1_DOWN
    HIGH RELAY1_UP
    current1Direction = 1
return

stopBlinds2:
    low RELAY2_DOWN
    low RELAY2_UP
    gosub sendCurrentPosition
    current2Direction = 0
return

stopBlinds2Silent:
    low RELAY2_DOWN
    low RELAY2_UP
    current2Direction = 0
return

blinds2Up:
    gosub stopBlinds2Silent
    pause 100
    high RELAY2_DOWN
    low RELAY2_UP
    current2Direction = 2
return

blinds2Down:
    gosub stopBlinds2Silent
    pause 100
    LOW RELAY2_DOWN
    HIGH RELAY2_UP
    current2Direction = 1
return

stopBlinds3:
    low RELAY3_DOWN
    low RELAY3_UP
    gosub sendCurrentPosition
    current3Direction = 0
return

stopBlinds3Silent:
    low RELAY3_DOWN
    low RELAY3_UP
    current3Direction = 0
return

blinds3Up:
    gosub stopBlinds3Silent
    pause 100
    high RELAY3_DOWN
    low RELAY3_UP
    current3Direction = 2
return

blinds3Down:
    gosub stopBlinds3Silent
    pause 100
    LOW RELAY3_DOWN
    HIGH RELAY3_UP
    current3Direction = 1
return

sendCurrentPosition:
    temp_data[0] = "l"
    temp_data[1] = "|"
    temp_byte = current1Counter
    gosub convertNoToStr
    temp_data[2] = temp3_byte
    temp_data[3] = temp2_byte
    temp_data[4] = temp1_byte
    temp_data[5] = "|"
    temp_byte = current2Counter
    gosub convertNoToStr
    temp_data[6] = temp3_byte
    temp_data[7] = temp2_byte
    temp_data[8] = temp1_byte
    temp_data[9] = "|"
    temp_byte = current3Counter
    gosub convertNoToStr
    temp_data[10] = temp3_byte
    temp_data[11] = temp2_byte
    temp_data[12] = temp1_byte
    temp_data[13] = 13
    temp_data[14] = 10
return

compute1Counter:
    disable
    temp_word = timeout1_value * temp2_byte
    counter1 = div32 100
    enable
return

compute2Counter:
    disable
    temp_word = timeout2_value * temp2_byte
    counter2 = div32 100
    enable
return

compute3Counter:
    disable
    temp_word = timeout3_value * temp2_byte
    counter3 = div32 100
    enable
return

sendDataOK:
    temp_data[0] = "O"
    temp_data[1] = "K"
    temp_data[2] = 10
return

convertInputData:
    conversionSuccess = 0
    TEMP_BYTE="a"
    for ci=0 to 2    
        TEMP1_BYTE = "a"
        TEMP2_BYTE = data_in[i]
        if (TEMP2_BYTE == "|") then return
        GOSUB lookupChar
        if (TEMP1_BYTE == "a") then return 
        if (ci==0) then 
            TEMP_BYTE = TEMP1_BYTE
            conversionSuccess = 1 
        else 
            TEMP_BYTE = TEMP_BYTE*10 + TEMP1_BYTE
            conversionSuccess = 1
        endif
        i = i + 1
    next ci
return

lookupChar:
    LOOKDOWN temp2_byte,["0123456789"], temp1_byte
RETURN

convertNoToStr:
        temp3_byte = (temp_byte DIG 2) + $30
        temp2_byte = (temp_byte DIG 1) + $30
        temp1_byte = (temp_byte DIG 0) + $30
return
