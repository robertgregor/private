'@  __config _INTRC_OSC_NOCLKOUT & _WDT_ON & _MCLRE_OFF & _CP_OFF & _CPD_OFF & _FCMEN_OFF & _IESO_OFF & _BOR_ON & _PWRTE_ON
                 
@ DEVICE PIC16F690,INTRC_OSC_NOCLKOUT
@ DEVICE PIC16F690,WDT_ON
@ DEVICE PIC16F690,MCLR_OFF
@ DEVICE PIC16F690,CPD_OFF
@ DEVICE PIC16F690,BOD_ON
@ DEVICE PIC16F690,PWRT_ON

'EEPROM_MAP
'0 - channel number
'1,2,3,4,5 bank name transmitter
'6,7,8,9 bank name device
'10 device id
'11 treshold
'12 interval
'13 temperature - it is temperature / 2
'14 manual control

INCLUDE "RFM70.pbp"

EEPROM  0, [40,"R","E","M","O","T","E","H","O","M",0,0,12,44,0]

 DEFINE OSC 8
  
 OSCCON = %01110000 ' Internal 8MHz osc
 ANSEL = 0
 ANSELH = 0
 CM1CON0 = 0
 CM2CON0 = 0
 
 'interrupt for timer
 INTCON = %10100000
 PIE1 = %00000000
 OPTION_REG = %00000111

on interrupt goto intManagement
ENABLE
'-----------init----------------------------------------------------------------
TRISA = %00100000 'Set PORTA to all output
TRISB = %00110000 'Set , SDI input
TRISC = %00000100 'Set IRQ input, 
WPUA = %11111111
WPUB = %11111111

HEATING_SENSOR var PORTA.5
RELAY var PORTA.4
RES var PORTB.5
i VAR BYTE 'loop counter
j var byte
ic var byte
confSuccess var byte
configure var byte
temp_byte_int var byte
temp_byte var byte
temp1_byte var byte
temp2_byte var byte
temp3_byte var byte
temp4_byte var byte
temp_word var word
temp2_word var word
temp3_word var word
temperature var word
firstTemperature VAR WORD
differenceManaged var byte
difference VAR WORD
seconds  var    word    ' Define second variable
realseconds var byte
ticks   var     byte    ' Define pieces of seconds variable
dat var word 'unscaled ADC data
normalMode VAR byte
Dummy       VAR BYTE
TempC       VAR WORD
Float       VAR WORD        
busy        var BIT
sleep_period var word
currentState var byte
temperatureExp var byte
threshold var byte
manualcontrol var byte

startProg:
clear
output relay
input heating_sensor
read 12, sleep_period
sleep_period = sleep_period * 10
read 10, device_id
read 11, threshold
read 13, temperatureExp
read 14, manualcontrol
gosub readTempSensor
firstTemperature = temperature
normalmode = 0
gosub relayOff
gosub initModule
commonSettings:
gosub commonRXTX
if (device_id != 0) then
    gosub setModebasedonsleepperiod
endif
Main_rx:
gosub setup_rx 'setup Rx
pause 2 'delay for Rx starting
Ce=1 'set nRF24L01 in Rx mode
irqLoop:
'here the reset should be triggered
if RES == 0 then
    write 0, 40
    write 1, "R"
    write 2, "E"
    write 3, "M"
    write 4, "O"
    write 5, "T"
    write 6, "E"
    write 7, "H"
    write 8, "O"
    write 9, "M"
    write 10, 0
    write 11, 0
    write 12, 12
    write 13, 44
    write 14, 0
    pause 1000
    goto startProg
endif
if (normalMode == 1) then
    if (sleep_period != 0) then
          normalMode = 2
           seconds = sleep_period
          'ok send temperature wait for the response 4 seconds and sleep 10 minutes
          gosub sendTemperature
    endif
endif
'Check for data to send
if (temp_data[0] != 0) then
    if (configure == 1) then
        gosub commonRXTX
        configure = 0
    endif
    gosub sendData
    TEMP_data[0] = 0
    GOTO main_rx
endif
If Irq !=0 then irqLoop 'wait until IRQ, active low
Ce=0
lop:
data_out[0]=rd_rx_pload 'Read 5 bytes Rx pload
num_byte=payloadLength
gosub spi_read
temp_data[0] = 0
if (data_in[1] == device_id) then
    if (data_in[3] == "=") then
        i = 4
        gosub convertInputData
        if (data_in[2] == "c") then    
           'OK it is configure
            for i = 0 to 10
                disable
                write i, data_in[i+4]
                enable
            next i
            read 10, device_id
            pause 250
            configure = 1
            gosub sendDataOK
        elseif (confSuccess == 1) then                
            if (data_in[2] == "m") then
                disable   
                write 12, temp_byte
                enable
                sleep_period = temp_byte * 10
                seconds = sleep_period
                gosub setModeBasedOnSleepPeriod
                gosub sendDataOK
            elseif (data_in[2] == "t") then
                disable
                write 13, temp_byte
                enable
                temperatureExp = temp_byte
                gosub sendDataOK
            elseif (data_in[2] == "r") then
                if (temp_byte < 10) then
                    disable 
                    write 11, temp_byte
                    enable
                    threshold = temp_byte
                    gosub sendDataOK
                endif
            endif
        endif
    ELSEif (data_in[2] == "s") then    
            gosub sendTemperature
    ELSEif (data_in[2] == "o") then
        GOSUB relayOn
        manualcontrol = 1
        GOSUB sendDataOK    
    ELSEif (data_in[2] == "f") then    
        GOSUB relayOff
        manualcontrol = 1
        GOSUB sendDataOK    
    ELSEif (data_in[2] == "x") then
        manualcontrol = 1
        disable
        write 14, 1
        enable
        GOSUB sendDataOK    
    ELSEif (data_in[2] == "y") then
        manualcontrol = 0
        disable
        write 14, 0
        enable
        GOSUB sendDataOK    
    elseif (data_in[2] == "p") then
            if (data_in[3] == "n") then
                gosub sendDataOK
            endif
    endif
    if (temp_data[0] == 0) then
        gosub sendError
    endif
endif
data_out[0]=Fifo_status 'Read FIFO status
num_byte=1
gosub spi_read
val= data_in[1] 'FIFO status register
if val.0=0 then lop 'test RX_EMPTY=1, RX_FIFO empty
data_out[0]=Write_reg+Stat_us 'reset RX_DR status bit
data_out[1]=%01000000 'write 1 tp RX_DR to reset IRQ
num_byte=1
gosub spi_write
pause 2 'wait 2ms Rx<->Tx
GOTO Main_rx
end

disable
intManagement:
        if (INTCON.2 == 1) then
           ticks = ticks + 1      ' Count pieces of seconds
           If ticks < 31 Then tiexit
           ticks = 0
           realseconds = realseconds + 1
           if (realseconds == 50) then
                realseconds = 0
                if (differenceManaged == 0) then
                    differenceManaged = 1
                    gosub readTempSensor
                    difference = temperature - firstTemperature
                endif
           endif
           if (seconds > 0) then
                seconds = seconds - 1
                if (seconds == 0) then
                    gosub setmodebasedonsleepperiod
                endif
           endif
           tiexit: 
           INTCON.2 = 0
        endif
        INTCON.7 = 1
resume
enable

sendError:
        temp_data[0] = "E"
        temp_data[1] = "R"
        temp_data[2] = "R"
        temp_data[3] = "O"
        temp_data[4] = "R"
        temp_data[5] = 13
        temp_data[6] = 10
return

sendDataOK:
    temp_data[0] = "O"
    temp_data[1] = "K"
    temp_data[2] = 13
    temp_data[3] = 10
return

convertInputData:
    TEMP_BYTE=0
    confSuccess = 0
    for ic=0 to 2    
        TEMP1_BYTE = "a"
        TEMP2_BYTE = data_in[i]
        if (TEMP2_BYTE == "|") then return
        GOSUB lookupChar
        if (TEMP1_BYTE == "a") then return 
        if (ic==0) then 
            TEMP_BYTE = TEMP1_BYTE
            confSuccess = 1 
        else 
            TEMP_BYTE = TEMP_BYTE*10 + TEMP1_BYTE 
            confSuccess = 1
        endif
        i = i + 1
    next ic
return

lookupChar:
    LOOKDOWN temp2_byte,["0123456789"], temp1_byte
RETURN

readTempSensor:
   OWOUT HEATING_SENSOR, 1, [$CC, $44] 'Skip ROM search & do temp conversion
  Wait_Up:
   OWIN HEATING_SENSOR, 4, [Busy]      'Read busy-bit
   IF Busy = 0 THEN goto Wait_Up            'Still busy..?, Wait_Up..!
   OWOUT HEATING_SENSOR, 1, [$CC, $BE] 'Skip ROM search & read scratchpad memory
   OWIN HEATING_SENSOR, 2, [temperature.Lowbyte, temperature.Highbyte] 'Read two bytes / end comms
   if (differenceManaged == 1) then
        temperature = temperature - difference
   endif
return

sendTemperature:
   'read current temperature
   gosub readTempSensor
   temp_data[0] = "6"
   temp_data[1] = "|"
   if (temperature.11 == 1) then
        temp_data[2] = "-"
        disable
        Dummy = 625 * (~temperature+1)
        TempC = DIV32 10
        enable
        temp_data[3] = (TempC DIG 4) + $30
        temp_data[4] = (TempC DIG 3) + $30
        if (currentState != 1) then gosub relayOn
   else
        disable
        Dummy = 625 * temperature
        TempC = DIV32 10
        enable
        TempC  = (temperature & $0FF0) >> 4 ' Mask middle 8-bits, shift into lower byte
        Float = ((temperature.Lowbyte & $0F) * 625) ' Lower 4-bits of result * 625
        temp_data[2] = (TempC DIG 1) + $30
        temp_data[3] = (TempC DIG 0) + $30
        temp_data[4] = (Float DIG 3) + $30
        temp3_word = (TempC.lowbyte * 10) + (temp_data[4] - $30)
        'Set the relay based on the expected temperature
        if (temp3_word < 30) then
            if (currentState != 1) then gosub relayOn
        else
            if (manualcontrol == 0) then
                if (temperatureExp != 0) then
                    temp_word = temp3_word + threshold
                    temp2_word = ((temperatureExp / 2) * 10) + ((temperatureExp // 2) * 5)
                    if (temp_word > temp2_word) then
                        if (currentState != 0) then gosub relayOff
                    else
                        temp_word = temp3_word - threshold
                        if (temp_word < temp2_word) then 
                            if (currentState != 1) then gosub relayOn
                        endif
                    endif
                endif
            endif
        endif
   endif
        temp_data[5] = "|"
        temp_byte = sleep_period / 10
        i=6
        gosub printByteToTempByte
        temp_data[9] = "|"
        i=9
        temp_byte = temperatureExp
        gosub print2LastBytesToTempByte
        temp_data[12] = "|"
        temp_data[13] = currentState + $30
        temp_data[14] = "|"
        temp_data[15] = threshold + $30
        temp_data[16] = "|"
        temp_data[17] = manualcontrol + $30
        temp_data[18] = 13
        temp_data[19] = 10
return

printByteToTempByte:        
        temp_data[i] = (temp_byte DIG 2) + $30
print2LastBytesToTempByte:
        temp_data[i+1] = (temp_byte DIG 1) + $30
        temp_data[i+2] = (temp_byte DIG 0) + $30
return

relayOff:
    LOW RELAY
    currentState = 0
return

relayOn:
    HIGH RELAY
    currentState = 1
return

setModeBasedOnSleepPeriod:
    if (sleep_period == 0) then 
        normalMode = 0
    else     
        normalmode = 1
    endif
return

setRxAddressPipe:
READ 6, data_out[1]
READ 7, data_out[2]
READ 8, data_out[3]
READ 9, data_out[4]
data_out[5] = device_id
return

setTxAddressPipe:
READ 1, data_out[1]
READ 2, data_out[2]
READ 3, data_out[3]
READ 4, data_out[4]
READ 5, data_out[5]
return
