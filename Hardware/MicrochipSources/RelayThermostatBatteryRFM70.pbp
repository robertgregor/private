'@  __config _INTRC_OSC_NOCLKOUT & _WDT_ON & _MCLRE_OFF & _CP_OFF & _CPD_OFF & _FCMEN_OFF & _IESO_OFF & _BOR_ON & _PWRTE_ON
                 
@ DEVICE PIC16F690,INTRC_OSC_NOCLKOUT
@ DEVICE PIC16F690,WDT_ON
@ DEVICE PIC16F690,MCLR_OFF
@ DEVICE PIC16F690,CPD_OFF
@ DEVICE PIC16F690,BOD_ON
@ DEVICE PIC16F690,PWRT_ON

'EEPROM_MAP
'0 - channel number
'1,2,3,4,5 bank name
'6 device id
'7 treshold
'9 interval
'10 temperature - it is temperature / 2

INCLUDE "RFM70.pbp"

EEPROM  0, [40,"R","O","B","I","K",0,0,0,0,0,0,0,0,0,0]

 DEFINE OSC 8
 DEFINE ADC_BITS 10 ' ADCIN resolution (Bits)
 DEFINE ADC_CLOCK 3 ' ADC clock source (Fosc/32)
 DEFINE ADC_SAMPLEUS 50 ' ADC sampling time (uSec)
 ADCON0.7 = 1
 
 OSCCON = %01110000 ' Internal 8MHz osc
 ANSEL = %10000000
 ANSELH = 0
 CM1CON0 = 0
 CM2CON0 = 0
 
 'interrupt for timer
 INTCON = %10100000
 PIE1 = %00000000
 OPTION_REG = %00000111

on interrupt goto intManagement
ENABLE
'-----------init----------------------------------------------------------------
TRISA = %00100000 'Set PORTA to all output
TRISB = %00010000 'Set , SDI input
TRISC = %00001100 'Set IRQ input, 

HEATING_SENSOR var PORTA.5
HEATING_SENSOR_power var PORTC.5
RELAY_1 var PORTC.4
RELAY_2 var PORTC.3
i VAR BYTE 'loop counter
j var byte
ic var byte
VDD VAR WORD
confSuccess var byte
configure var byte
temp_byte_int var byte
temp_byte var byte
temp1_byte var byte
temp2_byte var byte
temp3_byte var byte
temp4_byte var byte
temp_word var word
temp2_word var word
temp3_word var word
temperature var word
seconds  var    byte    ' Define second variable
ticks   var     byte    ' Define pieces of seconds variable
dat var word 'unscaled ADC data
normalMode VAR byte
Dummy       VAR BYTE
TempC       VAR WORD
Float       VAR WORD        
busy        var BIT
sleep_period var word
currentState var byte
temperatureExp var byte
treshold var byte

clear
output heating_sensor_power
output relay_1
output relay_2
input heating_sensor
read 9, sleep_period
sleep_period = sleep_period * 10
read 6, device_id
'here the reset should be triggered
if 1 == 0 then
    write 0, 40
    write 1, "R"
    write 2, "O"
    write 3, "B"
    write 4, "I"
    write 5, "K"
    write 6, 0
    write 7, 0
    write 8, 0
    END
endif
normalmode = 0
low HEATING_SENSOR_power
gosub relayOff
gosub initModule
'--------------Common RX-TX settings--------------------------------------------
commonSettings:
gosub commonRXTX
'============Main Rx============================================================
READ 6, temp_byte
if (temp_byte != 0) then
    normalMode = 1
endif
Main_rx:
gosub setup_rx 'setup Rx
pause 2 'delay for Rx starting
Ce=1 'set nRF24L01 in Rx mode
irqLoop:
if (normalMode == 1) then
      normalMode = 2
       seconds = 0
      'ok send temperature wait for the response 4 seconds and sleep 10 minutes
      gosub sendTemperature
endif
'Check for data to send
if (temp_data[0] != 0) then
    if (configure == 1) then
        gosub commonRXTX
        configure = 0
    endif
    gosub sendData
    TEMP_data[0] = 0
    GOTO main_rx
endif
if (normalMode == 3) then
      disable
      INTCON = 0
      PIE1 = 0
      gosub setup_sleep
      pause 10
      sleep sleep_period
      pause 10
      seconds = 0
      ticks = 0
      INTCON = %11100000
      PIE1 = %00100000
      OPTION_REG = %00000111
      enable
      normalMode = 1
      goto commonSettings
endif
if (normalMode == 2) then
    if (seconds > 2) then
        'OK, go to sleep
        normalMode = 3
    endif
endif
If Irq !=0 then irqLoop 'wait until IRQ, active low
Ce=0
lop:
data_out[0]=rd_rx_pload 'Read 5 bytes Rx pload
num_byte=payloadLength
gosub spi_read
temp_data[0] = 0
if (data_in[1] == device_id) then
    if (data_in[3] == "=") then
        i = 4
        gosub convertInputData
        if (data_in[2] == "c") then    
            'OK it is configure
            write 0, data_in[9]
            write 1, data_in[4]            
            write 2, data_in[5]            
            write 3, data_in[6]            
            write 4, data_in[7]            
            write 5, data_in[8]            
            write 6, data_in[10]            
            pause 10
            configure = 1
            device_id = data_in[10]
            gosub sendDataOK
        elseif (confSuccess == 1) then                
            if (data_in[2] == "m") then   
                write 9, temp_byte
                sleep_period = temp_byte
                gosub setModeBasedOnSleepPeriod
                gosub sendDataOK
            elseif (data_in[2] == "t") then 
                write 10, temp_byte
                temperatureExp = temp_byte
                gosub sendDataOK
            elseif (data_in[2] == "r") then
                if (temp_byte < 10) then 
                    write 7, temp_byte
                    treshold = temp_byte
                    gosub sendDataOK
                endif
            endif
        endif
    ELSEif (data_in[2] == "s") then    
            gosub sendTemperature
    ELSEif (data_in[2] == "o") then
        GOSUB relayOn
        GOSUB sendDataOK    
    ELSEif (data_in[2] == "f") then    
        GOSUB relayOff
        GOSUB sendDataOK    
    elseif (data_in[2] == "p") then
            if (data_in[3] == "n") then
                gosub sendDataOK
            endif
    endif
    if (temp_data[0] == 0) then
        gosub sendError
    endif
endif
data_out[0]=Fifo_status 'Read FIFO status
num_byte=1
gosub spi_read
val= data_in[1] 'FIFO status register
if val.0=0 then lop 'test RX_EMPTY=1, RX_FIFO empty
data_out[0]=Write_reg+Stat_us 'reset RX_DR status bit
data_out[1]=%01000000 'write 1 tp RX_DR to reset IRQ
num_byte=1
gosub spi_write
pause 2 'wait 2ms Rx<->Tx
GOTO Main_rx
end

disable
intManagement:
        if (INTCON.2 == 1) then
           ticks = ticks + 1      ' Count pieces of seconds
           If ticks < 31 Then tiexit
           ticks = 0
           seconds = seconds + 1
           if seconds <= 58 then tiexit
           seconds = 0
           tiexit: 
           INTCON.2 = 0
        endif
        INTCON.7 = 1
resume
enable

sendError:
        temp_data[0] = "E"
        temp_data[1] = "R"
        temp_data[2] = "R"
        temp_data[3] = "O"
        temp_data[4] = "R"
        temp_data[5] = 13
        temp_data[6] = 10
return

sendDataOK:
    temp_data[0] = "O"
    temp_data[1] = "K"
    temp_data[2] = 13
    temp_data[3] = 10
return

convertInputData:
    TEMP_BYTE=0
    confSuccess = 0
    for ic=0 to 2    
        TEMP1_BYTE = "a"
        TEMP2_BYTE = data_in[i]
        if (TEMP2_BYTE == "|") then return
        GOSUB lookupChar
        if (TEMP1_BYTE == "a") then return 
        if (ic==0) then 
            TEMP_BYTE = TEMP1_BYTE
            confSuccess = 1 
        else 
            TEMP_BYTE = TEMP_BYTE*10 + TEMP1_BYTE 
            confSuccess = 1
        endif
        i = i + 1
    next ic
return

lookupChar:
    LOOKDOWN temp2_byte,["0123456789"], temp1_byte
RETURN

sendTemperature:
    high HEATING_SENSOR_power
    pause 50
   'read current temperature    
   OWOUT HEATING_SENSOR, 1, [$CC, $44] 'Skip ROM search & do temp conversion
Wait_Up:
   OWIN HEATING_SENSOR, 4, [Busy]      'Read busy-bit
   IF Busy = 0 THEN goto Wait_Up            'Still busy..?, Wait_Up..!
   OWOUT HEATING_SENSOR, 1, [$CC, $BE] 'Skip ROM search & read scratchpad memory
   OWIN HEATING_SENSOR, 2, [temperature.Lowbyte, temperature.Highbyte] 'Read two bytes / end comms
   low HEATING_SENSOR_power
   temp_data[0] = "7"
   temp_data[1] = "|"
   if (temperature.11 == 1) then
        temp_data[2] = "-"
        disable
        Dummy = 625 * (~temperature+1)
        TempC = DIV32 10
        enable
        temp_data[3] = (TempC DIG 4) + $30
        temp_data[4] = (TempC DIG 3) + $30
        if (currentState != 1) then gosub relayOn
   else
        disable
        Dummy = 625 * temperature
        TempC = DIV32 10
        enable
        TempC  = (temperature & $0FF0) >> 4 ' Mask middle 8-bits, shift into lower byte
        Float = ((temperature.Lowbyte & $0F) * 625) ' Lower 4-bits of result * 625
        temp_data[2] = (TempC DIG 1) + $30
        temp_data[3] = (TempC DIG 0) + $30
        temp_data[4] = (Float DIG 3) + $30
        temp3_word = (TempC.lowbyte * 10) + (temp_data[4] - $30)
        'Set the relay based on the expected temperature
        if (temp3_word < 30) then
            if (currentState != 1) then gosub relayOn
        else
            if (temperatureExp != 0) then
                temp_word = temp3_word + treshold
                temp2_word = ((temperatureExp / 2) * 10) + ((temperatureExp // 2) * 5)
                if (temp_word > temp2_word) then
                    if (currentState != 0) then gosub relayOff
                else
                    temp_word = temp3_word - treshold
                    if (temp_word < temp2_word) then 
                        if (currentState != 1) then gosub relayOn
                    endif
                endif
            endif
        endif
   endif
        'read baterry        
        VRCON.4 = 1 ; Turn 0.6V reference ON
        PAUSEUS 200 ; Allow VP6 to settle
        ADCIN 13, temp_word ; get VP6 analog reading (10-bit)
        VRCON.4 = 0 ; Turn 0.6V reference OFF
        VDD = 6138 / temp_word ; convert to voltage ve vdd je 25 = 2,5 V        
        temp_data[5] = "|"
        temp_data[6] = (VDD DIG 1) + $30
        temp_data[7] = (VDD DIG 0) + $30
        temp_data[8] = "|"
        temp_byte = sleep_period
        i=9
        gosub printByteToTempByte
        temp_data[12] = "|"
        i=12
        temp_byte = temperatureExp
        gosub print2LastBytesToTempByte
        temp_data[15] = "|"
        temp_data[16] = currentState + $30
        temp_data[17] = "|"
        temp_data[18] = treshold + $30
        temp_data[19] = 13
        temp_data[20] = 10
return

printByteToTempByte:        
        temp_data[i] = (temp_byte DIG 2) + $30
print2LastBytesToTempByte:
        temp_data[i+1] = (temp_byte DIG 1) + $30
        temp_data[i+2] = (temp_byte DIG 0) + $30
return

stoprelay:
    low RELAY_1
    low RELAY_2
return

relayOff:
    high RELAY_1
    low RELAY_2
    pause 100
    gosub stoprelay
    currentState = 0
return

relayOn:
    LOW RELAY_1
    HIGH RELAY_2
    pause 100
    gosub stoprelay
    currentState = 1
return

setModeBasedOnSleepPeriod:
    if (sleep_period == 0) then 
        normalMode = 0
    else     
        normalmode = 1
    endif
return
