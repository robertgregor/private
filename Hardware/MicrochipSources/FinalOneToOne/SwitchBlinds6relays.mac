
	NOLIST
; PICBASIC PRO(TM) Compiler 2.60C, (c) 1998, 2011 microEngineering Labs, Inc. All Rights Reserved. 

LABEL?L macro Label
        RST?RP
    ifdef PM_USED
        LALL
Label
        XALL
    else
Label
    endif
    endm

AIN?BBB macro Bin, Bout, Bndx
	MOVE?BA	Bndx
        addlw   low (Bout)
        movwf   FSR
    if ((Bout) > 255)
        bsf     STATUS, IRP
    endif
        MOVE?BB Bin, INDF
    if ((Bout) > 255)
        bcf     STATUS, IRP
    endif
    endm

AIN?BBW macro Bin, Bout, Wndx
	MOVE?WA	Wndx
        addlw   low (Bout)
        movwf   FSR
    if ((Bout) > 255)
        bsf     STATUS, IRP
    endif
        MOVE?BB Bin, INDF
    if ((Bout) > 255)
        bcf     STATUS, IRP
    endif
    endm

AIN?CBB macro Cin, Bout, Bndx
	MOVE?BA	Bndx
        addlw   low (Bout)
        movwf   FSR
    if ((Bout) > 255)
        bsf     STATUS, IRP
    endif
        MOVE?CB Cin, INDF
    if ((Bout) > 255)
        bcf     STATUS, IRP
    endif
    endm

AIN?CWB macro Cin, Wout, Bndx
        CHK?RP  Bndx
        bcf     STATUS, C
        rlf     Bndx, W
        addlw   low (Wout)
        movwf   FSR
    if ((Wout) > 255)
        bsf     STATUS, IRP
    endif
        MOVE?CB low (Cin), INDF
        incf    FSR, F
        MOVE?CB (Cin) >> 8, INDF
    if ((Wout) > 255)
        bcf     STATUS, IRP
    endif
    endm

AIN?WBB macro Win, Bout, Bndx
	MOVE?BA	Bndx
        addlw   low (Bout)
        movwf   FSR
    if ((Bout) > 255)
        bsf     STATUS, IRP
    endif
        MOVE?WB Win, INDF
    if ((Bout) > 255)
        bcf     STATUS, IRP
    endif
    endm

AIN?WWB macro Win, Wout, Bndx
        CHK?RP  Bndx
        bcf     STATUS, C
        rlf     Bndx, W
        addlw   low (Wout)
        movwf   FSR
    if ((Wout) > 255)
        bsf     STATUS, IRP
    endif
        MOVE?BB Win, INDF
        incf    FSR, F
        MOVE?BB (Win) + 1, INDF
    if ((Wout) > 255)
        bcf     STATUS, IRP
    endif
    endm

AOUT?BBB macro Bin, Bndx, Bout
        MOVE?BA Bndx
        addlw   low (Bin)
        movwf   FSR
    if ((Bin) > 255)
        bsf     STATUS, IRP
    endif
        MOVE?BB INDF, Bout
    if ((Bin) > 255)
        bcf     STATUS, IRP
    endif
    endm

AOUT?BWB macro Bin, Wndx, Bout
        MOVE?WA Wndx
        addlw   low (Bin)
        movwf   FSR
    if ((Bin) > 255)
        bsf     STATUS, IRP
    endif
        MOVE?BB INDF, Bout
    if ((Bin) > 255)
        bcf     STATUS, IRP
    endif
    endm

AOUT?WBW macro Win, Bndx, Wout
        CHK?RP  Bndx
        bcf     STATUS, C
        rlf     Bndx, W
        addlw   low (Win)
        movwf   FSR
    if ((Win) > 255)
        bsf     STATUS, IRP
    endif
        MOVE?BB INDF, Wout
        incf    FSR, F
        MOVE?BB INDF, (Wout) + 1
    if ((Win) > 255)
        bcf     STATUS, IRP
    endif
    endm

ADD?BCB macro Bin, Cin, Bout
    if ((Bout) == (Bin))
      if ((Cin) == 1)
        CHK?RP  Bout
        incf    Bout, F
      else
        movlw   Cin
        CHK?RP  Bin
        addwf   Bin, F
      endif
    else
      if ((Cin) == 1)
        CHK?RP  Bin
        incf    Bin, W
        MOVE?AB Bout
      else
        movlw   Cin
        CHK?RP  Bin
        addwf   Bin, W
        MOVE?AB Bout
      endif
    endif
    endm

ADD?BCW macro Bin, Cin, Wout
        movlw   low (Cin)
        CHK?RP  Bin
        addwf   Bin, W
        MOVE?AB Wout
    if (((Cin) >> 8) == 0)
        clrf    (Wout) + 1
        rlf     (Wout) + 1, F
    else
        movlw   (Cin) >> 8
        btfsc   STATUS, C
        addlw   1
        movwf   (Wout) + 1
    endif
    endm

ADD?BWW macro Bin, Win, Wout
        MOVE?BA Bin
    if ((Wout) == (Win))
        CHK?RP  Wout
        addwf   Wout, F
        btfsc   STATUS, C
        incf    (Wout) + 1, F
    else
        CHK?RP  Win
        addwf   Win, W
        MOVE?AB Wout
        MOVE?BA (Win) + 1
        btfsc   STATUS, C
        addlw   1
        MOVE?AB (Wout) + 1
    endif
    endm

ADD?CBB macro Cin, Bin, Bout
    if ((Bout) == (Bin))
      if ((Cin) == 1)
        CHK?RP  Bout
        incf    Bout, F
      else
        movlw   Cin
        CHK?RP  Bout
        addwf   Bout, F
      endif
    else
      if ((Cin) == 1)
        CHK?RP  Bin
        incf    Bin, W
        MOVE?AB Bout
      else
        movlw   Cin
        CHK?RP  Bin
        addwf   Bin, W
        MOVE?AB Bout
      endif
    endif
    endm

ADD?CBW macro Cin, Bin, Wout
        movlw   low (Cin)
        CHK?RP  Bin
        addwf   Bin, W
        MOVE?AB Wout
    if (((Cin) >> 8) == 0)
        clrf    (Wout) + 1
        rlf     (Wout) + 1, F
    else
        movlw   (Cin) >> 8
        btfsc   STATUS, C
        addlw   1
        movwf   (Wout) + 1
    endif
    endm

ADD?TCB macro Regin, Bitin, Cin, Bout
        movlw   Cin
        CHK?RP  Regin
        btfsc   Regin, Bitin
        addlw   1
        MOVE?AB Bout
    endm

ADD?WBB macro Win, Bin, Bout
        MOVE?BA Win
    if ((Bout) == (Bin))
        CHK?RP  Bout
        addwf   Bout, F
    else
        CHK?RP  Bin
        addwf   Bin, W
        MOVE?AB Bout
    endif
    endm

ADD?WCB macro Win, Cin, Bout
    if ((Cin) == 1)
        CHK?RP  Win
        incf    Win, W
    else
        movlw   Cin
        CHK?RP  Win
        addwf   Win, W
    endif
        MOVE?AB Bout
    endm

DIV?WCB macro Win, Cin, Bout
    if ((Cin) == 2)
        CHK?RP  Win
        rrf     (Win) + 1, W
        rrf     Win, W
        MOVE?AB Bout
    else
        MOVE?WW Win, R0
        MOVE?CW Cin, R1
        L?CALL  DIV
        MOVE?AB Bout
    endif
    endm
DIV_USED = 1

MUL?BCW macro Bin, Cin, Wout
        MOVE?BW Bin, R3
        MOVE?CW Cin, R1
        L?CALL  MUL
        MOVE?AWW R2, Wout
    endm
MUL_USED = 1

MUL?WBW macro Win, Bin, Wout
        MOVE?WW Win, R3
        MOVE?BW Bin, R1
        L?CALL  MUL
        MOVE?AWW R2, Wout
    endm
MUL_USED = 1

MUL?WCW macro Win, Cin, Wout
        MOVE?WW Win, R3
        MOVE?CW Cin, R1
        L?CALL  MUL
        MOVE?AWW R2, Wout
    endm
MUL_USED = 1

SUB?BBB macro Bin1, Bin2, Bout
    if ((Bout) == (Bin1))
        MOVE?BA Bin2
        CHK?RP  Bout
        subwf   Bout, F
    else
        MOVE?BA Bin2
        CHK?RP  Bin1
        subwf   Bin1, W
        MOVE?AB Bout
    endif
    endm

SUB?BCB macro Bin, Cin, Bout
    if ((Bout) == (Bin))
      if ((Cin) == 1)
        CHK?RP  Bout
        decf    Bout, F
      else
        movlw   Cin
        CHK?RP  Bout
        subwf   Bout, F
      endif
    else
      if ((Cin) == 1)
        CHK?RP  Bin
        decf    Bin, W
      else
        movlw   Cin
        CHK?RP  Bin
        subwf   Bin, W
      endif
        MOVE?AB Bout
    endif
    endm

SUB?BCW macro Bin, Cin, Wout
        movlw   low (-(Cin))
        CHK?RP  Bin
        addwf   Bin, W
        MOVE?AB Wout
        movlw   low ((-(Cin)) >> 8)
        btfsc   STATUS, C
        addlw   1
        movwf   (Wout) + 1
    endm

SUB?BWW macro Bin, Win, Wout
        MOVE?BA Win
        CHK?RP  Bin
        subwf   Bin, W
        MOVE?AB Wout
        CHK?RP  Win
        comf    (Win) + 1, W
        btfsc   STATUS, C
        addlw   1
        MOVE?AB (Wout) + 1
    endm

SUB?WCW macro Win, Cin, Wout
    if ((Wout) == (Win))
        movlw   low (Cin)
        CHK?RP  Wout
        subwf   Wout, F
        movlw   (Cin) >> 8
        btfss   STATUS, C
        addlw   1
        subwf   (Wout) + 1, F
    else
        movlw   low (Cin)
        CHK?RP  Win
        subwf   Win, W
        MOVE?AB Wout
        movlw   (Cin) >> 8
        btfss   STATUS, C
        addlw   1
        CHK?RP  Win
        subwf   (Win) + 1, W
        MOVE?AB (Wout) + 1
    endif
    endm

SUB?WWW macro Win1, Win2, Wout
        MOVE?BA Win2
    if ((Wout) == (Win1))
        CHK?RP  Wout
        subwf   Wout, F
        MOVE?BA (Win2) + 1
        btfss   STATUS, C
        addlw   1
        CHK?RP  Wout
        subwf   (Wout) + 1, F
    else
        CHK?RP  Win1
        subwf   Win1, W
        MOVE?AB Wout
        MOVE?BA (Win2) + 1
        btfss   STATUS, C
        addlw   1
        CHK?RP  Win1
        subwf   (Win1) + 1, W
        MOVE?AB (Wout) + 1
    endif
    endm

AND?BCB macro Bin, Cin, Bout
    if (Bout == Bin)
        movlw   Cin
        CHK?RP  Bin
        andwf   Bin, F
    else
        movlw   Cin
        CHK?RP  Bin
        andwf   Bin, W
        MOVE?AB Bout
    endif
    endm

AND?BCW macro Bin, Cin, Wout
        movlw   Cin
        CHK?RP  Bin
        andwf   Bin, W
        MOVE?AW Wout
    endm

CMPEQ?BCL macro Bin, Cin, Label
    if (((Cin) > -100h) & ((Cin) < 100h))
        CLRWDT?
        MOVE?BA Bin
        sublw   Cin
        BIT?GOTO 1, STATUS, Z, Label
    endif
    endm

CMPEQ?BWL macro Bin, Win, Label
        MOVE?WW Win, R0
        MOVE?BA Bin
        L?CALL  CMPEQW
        BIT?GOTO 0, STATUS, Z, Label
    endm
CMPEQW_USED = 1

CMPEQ?TCL macro Regin, Bitin, Cin, Label
    if (((Cin) == 0) | ((Cin) == 1))
        CLRWDT?
        BIT?GOTO Cin, Regin, Bitin, Label
    endif
    endm

CMPGE?BCL macro Bin, Cin, Label
    if ((Cin) <= 0)
        L?GOTO  Label
    else
      if ((Cin) < 100h)
        CLRWDT?
        MOVE?CA Cin
        CHK?RP  Bin
        subwf   Bin, W
        BIT?GOTO 1, STATUS, C, Label
      endif
    endif
    endm

CMPGT?BBL macro Bin1, Bin2, Label
        CLRWDT?
        MOVE?BA Bin1
        CHK?RP  Bin2
        subwf   Bin2, W
        BIT?GOTO 0, STATUS, C, Label
    endm

CMPGT?BCL macro Bin, Cin, Label
    if ((Cin) < 0)
        L?GOTO  Label
    else
      if ((Cin) < 0ffh)
        CLRWDT?
        MOVE?CA (Cin) + 1
        CHK?RP  Bin
        subwf   Bin, W
        BIT?GOTO 1, STATUS, C, Label
      endif
    endif
    endm

CMPLE?BBL macro Bin1, Bin2, Label
        CLRWDT?
        MOVE?BA Bin1
        CHK?RP  Bin2
        subwf   Bin2, W
        BIT?GOTO 1, STATUS, C, Label
    endm

CMPLE?BCL macro Bin, Cin, Label
    if ((Cin) >= 0ffh)
        L?GOTO  Label
    else
      if ((Cin) >= 0)
        CLRWDT?
        MOVE?CA (Cin) + 1
        CHK?RP  Bin
        subwf   Bin, W
        BIT?GOTO 0, STATUS, C, Label
      endif
    endif
    endm

CMPLE?BWL macro Bin, Win, Label
        MOVE?BW Bin, R0
        MOVE?WWA Win, R1
        L?CALL  CMPLE
        BIT?GOTO 0, STATUS, Z, Label
    endm
CMPLE_USED = 1

CMPLE?WCL macro Win, Cin, Label
    if ((Cin) >= 0ffffh)
        L?GOTO  Label
    else
      if ((Cin) >= 0)
        MOVE?WW Win, R0
        MOVE?CB (Cin) >> 8, R1 + 1
        MOVE?CA low (Cin)
        L?CALL  CMPLE
        BIT?GOTO 0, STATUS, Z, Label
      endif
    endif
    endm
CMPLE_USED = 1

CMPLT?BCL macro Bin, Cin, Label
    if ((Cin) >= 100h)
        L?GOTO  Label
    else
      if ((Cin) > 0)
        CLRWDT?
        MOVE?CA Cin
        CHK?RP  Bin
        subwf   Bin, W
        BIT?GOTO 0, STATUS, C, Label
      endif
    endif
    endm

CMPNE?BBL macro Bin1, Bin2, Label
        CLRWDT?
        MOVE?BA Bin1
        CHK?RP  Bin2
        subwf   Bin2, W
        BIT?GOTO 0, STATUS, Z, Label
    endm

CMPNE?BCL macro Bin, Cin, Label
    if (((Cin) > -100h) & ((Cin) < 100h))
        CLRWDT?
        MOVE?BA Bin
        sublw   Cin
        BIT?GOTO 0, STATUS, Z, Label
    else
        L?GOTO  Label
    endif
    endm

CMPNE?TCL macro Regin, Bitin, Cin, Label
    if ((Cin) == 0)
        CLRWDT?
        BIT?GOTO 1, Regin, Bitin, Label
    else
      if ((Cin) == 1)
        CLRWDT?
        BIT?GOTO 0, Regin, Bitin, Label
      else
        L?GOTO  Label
      endif
    endif
    endm

CMPNE?WCL macro Win, Cin, Label
    if (((Cin) > -10000h) & ((Cin) < 10000h))
        MOVE?CW	Cin, R0
        MOVE?WWA Win, R1
        L?CALL  CMPNE
        BIT?GOTO 0, STATUS, Z, Label
    else
        L?GOTO  Label
    endif
    endm
CMPNE_USED = 1

DIG?BCW macro Bin, Cin, Wout
        MOVE?BW Bin, R0
        movlw   Cin
        L?CALL  DIG
        MOVE?AW Wout
    endm
DIG_USED = 1

DIV32?CW macro Cin, Wout
	MOVE?CB	(Cin) >> 8, R1 + 1
        MOVE?CA	low (Cin)
        L?CALL  DIV32L
        MOVE?AWW R0, Wout
    endm
DIV32L_USED = 1

DIV32?WW macro Win, Wout
        MOVE?WWA Win, R1
        L?CALL  DIV32L
        MOVE?AWW R0, Wout
    endm
DIV32L_USED = 1

ASM? macro
        RST?RP
    endm

CLEAR? macro
    ifdef BANK0_START
        movlw   BANK0_START
        movwf   FSR
        movlw   BANK0_END - BANK0_START + 1
        L?CALL  CLEAR
    endif
    ifdef BANK1_START
        movlw   BANK1_START
        movwf   FSR
        movlw   BANK1_END - BANK1_START + 1
        L?CALL  CLEAR
    endif
    ifdef BANK2_START
        movlw   low (BANK2_START)
        movwf   FSR
        movlw   BANK2_END - BANK2_START + 1
        L?CALL  CLEARH
    endif
    ifdef BANK3_START
        movlw   low (BANK3_START)
        movwf   FSR
        movlw   BANK3_END - BANK3_START + 1
        L?CALL  CLEARH
    endif
    endm
CLEAR_USED = 1

DISABLE? macro
    endm

ENABLE? macro
    endm

END? macro
    local loop
loop    sleep
        L?GOTO  loop
    endm

ENDASM? macro
    endm

GOSUB?L macro Label
    local dlabel
    ifdef DEBUG_STACK
        CHK?RP  DEBUG_STACK
      ifdef DEBUG_STACK_ADDR
        bcf     STATUS, C
        rlf     DEBUG_STACK, W
        addlw   DEBUG_STACK_ADDR
        movwf   FSR
        movlw   low (dlabel)
        movwf   INDF
        incf    FSR, F
        movlw	high (dlabel)
        movwf   INDF
      endif
        incf    DEBUG_STACK, F
    endif
        L?CALL  Label
dlabel
    endm

GOTO?L macro Label
        L?GOTO  Label
    endm

HIGH?T macro Regin, Bitin
        MOVE?CT 1, Regin, Bitin
        MOVE?CT 0, ((Regin) + 80h), Bitin
    endm

ICALL?L macro Label
        L?CALL  Label
    endm

INPUT?T macro Regin, Bitin
        MOVE?CT 1, ((Regin) + 80h), Bitin
    endm

LOOKDOWN?BCLB macro Bin, Cin, Label, Bout
    local loop, getval, valtbl
        MOVE?CB -1, R1
loop    incf    R1, F
        movf    R1, W
        sublw   (Cin) - 1
        BIT?GOTO 0, STATUS, C, Label
        L?CALL  getval
        CHK?RP  Bin
        subwf   Bin, W
        BIT?GOTO 0, STATUS, Z, loop
        MOVE?BB R1, Bout
        L?GOTO  Label
getval  movlw   high (valtbl)
        movwf   PCLATH
        movf    R1, W
	addlw	low (valtbl)
	btfsc	STATUS, C
	incf	PCLATH, F
	movwf	PCL
valtbl
    endm

LDRET?C macro Cin
        retlw   Cin
    endm

LOW?T macro Regin, Bitin
        MOVE?CT 0, Regin, Bitin
        MOVE?CT 0, ((Regin) + 80h), Bitin
    endm

NEXT?BCL macro Bin, Cin, Label
    if ((Cin) == 1)
        CHK?RP  Bin
      if ((PREV_BANK == 0) & (CODE_SIZE <= 2))
        incfsz  Bin, F
        goto    Label
      else
        incf    Bin, F
        BIT?GOTO 0, STATUS, Z, Label
      endif
    else
        movlw   Cin
        CHK?RP  Bin
        addwf   Bin, F
      if ((Cin) <= 255)
        BIT?GOTO 0, STATUS, C, Label
      endif
    endif
    endm

ONINT?LL macro Inthand, Intchk
    local label
        bsf     INTCON, GIE
        L?GOTO  label
Intchk  btfsc   INTCON, GIE
        return
        L?GOTO  Inthand
label
    endm
ONINT_USED = 1

OUTPUT?T macro Regin, Bitin
        MOVE?CT 0, ((Regin) + 80h), Bitin
    endm

PAUSE?C macro Cin
    if (((Cin) >> 8) == 0)
        MOVE?CA Cin
        L?CALL  PAUSE
    else
        MOVE?CB (Cin) >> 8, R1 + 1
        MOVE?CA low (Cin)
        L?CALL  PAUSEL
    endif
    endm
PAUSE_USED = 1

PAUSEUS?C macro Cin
    if (((Cin) >> 8) == 0)
        movlw   Cin
        L?CALL  PAUSEUS
    else
        MOVE?CB (Cin) >> 8, R0 + 1
        MOVE?CA low (Cin)
        L?CALL  PAUSEUSL
    endif
    endm
PAUSEUS_USED = 1

READADDRESS?C macro Cin
        MOVE?CB Cin, EEADR
    endm

READ?B macro Bout
        L?CALL  READ
        MOVE?AB Bout
    endm
READ_USED = 1

READ?W macro Wout
        L?CALL  READ
        MOVE?AW Wout
    endm
READ_USED = 1

RESUME? macro
        RST?RP
        retfie
    endm

RETURN? macro
    ifdef DEBUG_STACK
        CHK?RP  DEBUG_STACK
        decf    DEBUG_STACK, F
    endif
        RST?RP
        return
    endm

WRITEADDRESS?B macro Bin
        MOVE?BB Bin, EEADR
    endm

WRITEADDRESS?C macro Cin
        MOVE?CB Cin, EEADR
    endm

WRITEADDRESS?W macro Win
        MOVE?WB Win, EEADR
    endm

WRITE?B macro Bin
        MOVE?BA Bin
        L?CALL  WRITE
    endm
WRITE_USED = 1

WRITE?C macro Cin
        movlw   Cin
        L?CALL  WRITE
    endm
WRITE_USED = 1


	LIST
