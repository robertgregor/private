'@  __config _INTRC_OSC_NOCLKOUT & _WDT_ON & _MCLRE_OFF & _CP_OFF & _CPD_OFF & _FCMEN_OFF & _IESO_OFF & _BOR_ON & _PWRTE_ON

@ DEVICE PIC16F690,INTRC_OSC_NOCLKOUT
@ DEVICE PIC16F690,WDT_ON
@ DEVICE PIC16F690,MCLR_OFF
@ DEVICE PIC16F690,CPD_OFF
@ DEVICE PIC16F690,BOD_ON
@ DEVICE PIC16F690,PWRT_ON

'EEPROM_MAP
'0 - channel number
'1,2,3,4,5 bank name

INCLUDE "RFM70.pbp"

EEPROM  0, [40,"R","O","B","I","K",0,0,0,0,0,0,0,0,0,0]

 DEFINE OSC 8
 DEFINE HSER_RCSTA 90h
 DEFINE HSER_TXSTA 24h
 DEFINE HSER_SPBRG 51
 DEFINE HSER_CLROERR 1

 OSCCON = %01110000 ' Internal 8MHz osc
 ANSEL = 0
 ANSELH = 0
 CM1CON0 = 0
 CM2CON0 = 0
 
'interrupt for timer
INTCON = %11100000
PIE1 = %00100000
OPTION_REG = %00000111

on interrupt goto intManagement
ENABLE
'-----------init----------------------------------------------------------------
TRISA = %00100000 'Set PORTA to all output
TRISB = %00010000 'Set , SDI input
TRISC = %00000100 'Set IRQ input,
WPUA = %11111111
WPUB = %11111111 
resetButton var PORTA.5
i VAR BYTE 'loop counter
j var byte

manageSerial var byte
temp_byte_int var byte
temp_byte var byte
temp_word var word
temp1_byte var byte
temp2_byte var byte
temp3_byte var byte
temp4_byte var byte
ser_data var byte[payloadLength]
conversionSuccessfull var byte
ci var byte

ticks var byte
seconds var byte
minutes var byte
resetLabel:
clear
gosub initModule

commonSettings:
GOSUB commonRXTX
'============Main Rx============================================================
Main_rx:
gosub setup_rx 'setup Rx
pause 2 'delay for Rx starting
Ce=1 'set nRF24L01 in Rx mode
irqLoop:
if (resetButton == 0) then
    disable
    write 0, 40
    write 1, "R"
    write 2, "O"
    write 3, "B"
    write 4, "I"
    write 5, "K"
    enable
    gosub printConfig
    pause 2000
    goto resetLabel
endif
if (manageSerial==1) then
    manageserial = 0
    if ((ser_data[0] == "C" OR ser_data[0] == "c") AND ser_data[1] == "=") THEN 'channel
        i=2
        GOSUB convertInputData
        hserout ["a:",dec temp_byte,13,10]
        if (conversionSuccessfull == 1) then
            write 0, temp_byte
            gosub printOK
            GOSUB commonSettings
        else
            gosub printError
        endif
    elseif ((ser_data[0] == "P" OR ser_data[0] == "p") AND ser_data[1] == "=") THEN 'password
        GOSUB savePwd
        GOSUB commonSettings
    elseif ((ser_data[0] == "A" OR ser_data[0] == "a") AND ser_data[1] == "=") THEN 'add device
        i=2
        GOSUB convertInputData
        if (conversionSuccessfull == 1) then
            gosub addNewDevice
            GOTO Main_rx
        else
            gosub printError
        endif
    elseif ((ser_data[0] == "S" OR ser_data[0] == "s")) THEN 'print config
        GOSUB printConfig
    else
        i=0
        gosub convertInputData
        if (conversionSuccessfull != 1) then
            gosub printError
        elseif (ser_data[i] != "=") then
            gosub printError
        else
            device_id = temp_byte            
            for j = 0 to payloadLength
                temp_data[j]=ser_data[i + 1]
                if temp_data[j] == 0 then 
                    temp_data[j] = 10
                    goto endCycleS
                endif
                i = i + 1
                if (i==payloadLength) then
                    gosub printError 
                    goto Main_rx
                endif
            next j
            :endCycleS
        GOSUB commonRXTX
        gosub debounce
        GOSUB sendData
        gosub debounce
        endif
    endif
    GOTO Main_rx
endif
If Irq !=0 then irqLoop 'wait until IRQ, active low
' high led 'debug led
Ce=0
lop:
data_out[0]=rd_rx_pload 'Read 5 bytes Rx pload
num_byte=payloadLength
gosub spi_read
HSEROUT["+", DEC data_in[1], " "]
for w=2 to payloadLength
    HSEROUT[data_in[w]]
    if (data_in[w]) == 10 then goto contInRcv
next w
contInRcv:
data_out[0]=Fifo_status 'Read FIFO status
num_byte=1
gosub spi_read
val= data_in[1] 'FIFO status register
if val.0=0 then lop 'test RX_EMPTY=1, RX_FIFO empty
endRx:
data_out[0]=Write_reg+Stat_us 'reset RX_DR status bit
data_out[1]=%01000000 'write 1 tp RX_DR to reset IRQ
num_byte=1
gosub spi_write
GOTO Main_rx
end

disable
intManagement:
        if (INTCON.2 == 1) then
           ticks = ticks + 1      ' Count pieces of seconds
           If ticks < 31 Then tiexit
           ticks = 0
           seconds = seconds + 1
           if seconds <= 58 then tiexit
           seconds = 0
           minutes = minutes + 1
           tiexit: 
           INTCON.2 = 0
        else 
            if (PIR1.5 == 1) then
                 if (manageSerial == 1) then mainInt
                 if (RCSTA.2 == 1) then
                    hserin[temp_byte_int]
                 endif
                 HSERIN 100, mainInt, [wait ("AT+"), STR ser_data\payloadLength\10]
                 manageSerial = 1
                 :mainInt
            ENDIF
        endif
        INTCON.7 = 1
resume
enable

cleanSerialPort:
    while (PIR1.5==1) 
        hserin [temp_byte]
    wend
return

'============Subroutines========================================================
printError:
    HSEROUT["ERROR",13,10]
return

printOK:
    HSEROUT["OK",13,10]
return

convertInputData:
    temp_word = 0
    conversionSuccessfull = 0
    TEMP_BYTE="a"
    for ci=0 to 2    
        TEMP1_BYTE = "a"
        TEMP2_BYTE = ser_data[i]
        if (TEMP2_BYTE == "|") then return
        GOSUB lookupChar
        if (TEMP1_BYTE == "a") then return 
        if (ci==0) then 
            TEMP_word = TEMP1_BYTE
        else 
            TEMP_word = TEMP_word*10 + TEMP1_BYTE 
        endif
        conversionSuccessfull = 1
        i = i + 1
    next ci
    if (TEMP_word > 255) then
         conversionSuccessfull = 0
    else
        temp_byte = TEMP_word
    endif
return

lookupChar:
    LOOKDOWN temp2_byte,["0123456789"], temp1_byte
RETURN

savePwd:
    for i=2 to 6
        if (ser_data[i] == 0) or (ser_data[i] == 10) or (ser_data[i] == 13) or (ser_data[i] == " ") then 
            GOSUB printError
            return
        endif
    next i
    if (ser_data[7] == 0) then    
        for i=2 to 6
            write i-1, ser_data[i]
        next i
        gosub printOK
    else 
        gosub printError
    endif
return

addNewDevice:
read 0, ser_data[5]
READ 1, ser_data[0]
READ 2, ser_data[1]
READ 3, ser_data[2]
READ 4, ser_data[3]
READ 5, ser_data[4]
write 0, 40
write 1, "R"
write 2, "O"
write 3, "B"
write 4, "I"
write 5, "K"
'send channel, password, deviceId
device_id = 0
temp_data[0] = "c"
temp_data[1] = "="
temp_data[2] = ser_data[0] 'password
temp_data[3] = ser_data[1]
temp_data[4] = ser_data[2]
temp_data[5] = ser_data[3]
temp_data[6] = ser_data[4]
temp_data[7] = ser_data[5] 'channel
temp_data[8] = temp_byte 'deviceId
temp_data[9] = 13
temp_data[10] = 10
GOSUB commonRXTX
gosub debounce
gosub sendData
gosub debounce
'restore the original value
write 0, ser_data[5]
write 1, ser_data[0]
write 2, ser_data[1]
write 3, ser_data[2]
write 4, ser_data[3]
write 5, ser_data[4]
GOSUB commonRXTX
return

printConfig:
    read 0, temp_byte
    HSEROUT["+Channel:",DEC temp_byte,13,10]
    HSEROUT["+Password:"]
    read 1, temp_byte
    HSEROUT[temp_byte]
    read 2, temp_byte
    HSEROUT[temp_byte]
    read 3, temp_byte
    HSEROUT[temp_byte]
    read 4, temp_byte
    HSEROUT[temp_byte]
    read 5, temp_byte
    HSEROUT[temp_byte]
    HSEROUT[13,10]
return

