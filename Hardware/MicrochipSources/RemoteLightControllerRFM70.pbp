'@  __config _INTRC_OSC_NOCLKOUT & _WDT_ON & _MCLRE_OFF & _CP_OFF & _CPD_OFF & _FCMEN_OFF & _IESO_OFF & _BOR_ON & _PWRTE_ON
                 
@ DEVICE PIC16F690,INTRC_OSC_NOCLKOUT
@ DEVICE PIC16F690,WDT_ON
@ DEVICE PIC16F690,MCLR_OFF
@ DEVICE PIC16F690,CPD_OFF
@ DEVICE PIC16F690,BOD_ON
@ DEVICE PIC16F690,PWRT_ON

'EEPROM_MAP
'0 - channel number
'1,2,3,4,5 bank name
'6 - 0 switch on when applied power
'7 device id
'8 timeout
'9 1 - on when movement detected 0 no action
'10 - alarm enter timeout
'11 - alarm leave timeout

EEPROM  0, [40,"R","O","B","I","K",1,0,0,0,0,0,0,0,0,0]

 INCLUDE "RFM70.pbp"

 DEFINE OSC 8

 OSCCON = %01110000 ' Internal 8MHz osc
 ANSEL = 0
 ANSELH = 0
 CM1CON0 = 0
 CM2CON0 = 0
 
 'interrupt for timer
INTCON = %10100000
PIE1 = %00000000
OPTION_REG = %00000111

on interrupt goto intManagement
ENABLE

'-----------init----------------------------------------------------------------
TRISA = %00000000 'Set PORTA to all output
TRISB = %00110000 'Set , SDI input
TRISC = %00000110 'Set IRQ input, 
WPUA = %11111111
WPUB = %11111111

alarm VAR PORTC.1
alarmCounter VAR byte
RES var PORTB.5
RELAY VAR PORTA.4
i VAR BYTE 'loop counter
j var byte

relay_alarm_counter var byte
configure var byte
temp_byte_int var byte
temp_byte var byte
temp1_byte var byte
temp2_byte var byte
temp3_byte var byte
temp4_byte var byte
temp_word var word
ALSTATUS VAR BYTE '0 disabled, 1 enabled, 2 activated, 3 leave timeout running, 4 enter timeout running
ALEnterCounter VAR BYTE
ALLeaveCounter VAR BYTE
seconds  var     byte    ' Define second variable
ticks   var     byte    ' Define pieces of seconds variable
l1counter var byte
l1onAlarm var byte
conversionSuccess var byte

clear
startLabel:
read 7, device_id
read 9, l1onAlarm
input alarm
input RES
output relay
read 6, temp_byte
if (temp_byte == 0) then 
    gosub highRelay
else
    gosub lowrelay
endif
gosub initModule
commonSettings:
gosub commonRXTX

'============Main Rx============================================================
Main_rx:
gosub setup_rx 'setup Rx
pause 2 'delay for Rx starting
Ce=1 'set nRF24L01 in Rx mode
irqLoop:
'Check for data to send
if RES == 0 then
    write 0, 40
    write 1, "R"
    write 2, "O"
    write 3, "B"
    write 4, "I"
    write 5, "K"
    write 6, 1
    write 7, 0
    write 8, 0
    write 9, 0
    write 10, 0
    write 11, 0
    pause 2000
    goto startLabel
endif
if (temp_data[0] != 0) then
    if (configure == 1) then
        gosub commonRXTX
        configure = 0
    endif
    gosub sendData
    temp_data[0] = 0
    GOTO main_rx
endif
'send alarm notification
if (ALSTATUS == 5) then
    ALSTATUS = 2
    temp_data[0] = "A"
    temp_data[1] = "L"
    temp_data[2] = "A"
    temp_data[3] = "R"
    temp_data[4] = "M"
    temp_data[5] = 13
    temp_data[6] = 10
endif
If Irq !=0 then irqLoop 'wait until IRQ, active low
Ce=0
lop:
data_out[0]=rd_rx_pload 'Read 5 bytes Rx pload
num_byte=payloadLength
gosub spi_read
read 7, temp_byte
temp_data[0] = 0
if (data_in[1] == temp_byte) then
    if (data_in[2] == "c") then    
        if (data_in[3] == "=") then
            'OK it is configure
            write 0, data_in[9] 'channel
            write 1, data_in[4] 'password 0
            write 2, data_in[5] 'password 1
            write 3, data_in[6] 'password 2
            write 4, data_in[7] 'password 3
            write 5, data_in[8] 'password 4
            write 7, data_in[10]'device id
            pause 10
            device_id = data_in[10]
            configure = 1
            gosub sendDataOK
        endif
    endif
    if (data_in[2] == "l") then
        if (data_in[3] == "1") then
            if (data_in[4] == "c") then
                if (data_in[5] == "o") then
                    write 6, 0
                    gosub sendDataOK
                endif
                if (data_in[5] == "f") then
                    write 6, 1
                    gosub sendDataOK
                endif
                if (data_in[5] == "d") then
                    write 9, 1
                    l1onAlarm = 1
                    gosub sendDataOK
                endif
                if (data_in[5] == "c") then
                    write 9, 0
                    l1onAlarm = 0
                    gosub sendDataOK
                endif                
                if (data_in[5] == "t") then
                    if (data_in[6] == "=") then
                        i = 7
                        gosub convertInputData
                        if (conversionSuccess == 1) then
                            write 8, temp_byte
                            gosub sendDataOK
                        else
                            gosub sendDataError
                        endif
                    endif
                endif                
            endif
            if (data_in[4] == "o") then
                if (data_in[5] == "f") then
                    seconds = 0
                    read 8, l1counter
                    gosub highRelay
                else
                    gosub highRelay
                    l1counter = 0
                endif
                gosub sendDataOK
            endif
            if (data_in[4] == "f") then
                gosub LOWrelay
                gosub sendDataOK
            endif
        endif
    endif
    if (data_in[2] == "a") then
        if (data_in[3] == "l") then 
            if (data_in[4] == "a") then
                read 11, ALLeaveCounter
                ALEnterCounter = 0
                if (ALLeaveCounter == 0) then
                    alstatus = 1
                else
                    alstatus = 3
                endif
                gosub sendDataOK
            endif
            if (data_in[4] == "d") then
                alstatus = 0
                ALLeaveCounter = 0
                ALEnterCounter = 0
                gosub sendDataOK
            endif
            if (data_in[4] == "c") then
                if (data_in[6] == "=") then
                    i = 7
                    gosub convertInputData
                    if (conversionSuccess == 1) then
                        if (data_in[5] == "e") then
                            write 10, temp_byte
                            gosub sendDataOK
                        endif
                        if (data_in[5] == "l") then
                            write 11, temp_byte
                            gosub sendDataOK
                        endif
                    endif
                endif
            endif
        endif
    endif
    if (data_in[2] == "s") then
        if (data_in[3] == "a") then
            temp_data[0] = "1"
            temp_data[1] = "|"
            temp_data[2] = "a"
            temp_data[3] = "|"
            temp_data[4] = ALSTATUS + $30
            temp_data[5] = "|"
            temp_data[6] = alarm + $30
            temp_data[7] = "|"
            read 10, temp_byte 
            gosub convertNoToStr
            temp_data[8] = temp3_byte
            temp_data[9] = temp2_byte
            temp_data[10] = temp1_byte
            temp_data[11] = "|"
            read 11, temp_byte 
            gosub convertNoToStr
            temp_data[12] = temp3_byte
            temp_data[13] = temp2_byte
            temp_data[14] = temp1_byte
            temp_data[15] = 13            
            temp_data[16] = 10            
        endif
        if (data_in[3] == "c") then
            temp_data[0] = "1"
            temp_data[1] = "|"
            temp_data[2] = "c"
            temp_data[3] = "|"
            temp_data[4] = RELAY + $30
            temp_data[5] = "|"
            read 6, temp_data[6]
            temp_data[6] = temp_data[6] + $30        
            temp_data[7] = "|"
            read 9, temp_data[8]
            temp_data[8] = temp_data[8] + $30        
            temp_data[9] = "|"
            read 8, temp_byte
            gosub convertNoToStr
            temp_data[10] = temp3_byte
            temp_data[11] = temp2_byte
            temp_data[12] = temp1_byte
            temp_data[13] = "|"
            temp_byte = l1counter
            gosub convertNoToStr
            temp_data[14] = temp3_byte
            temp_data[15] = temp2_byte
            temp_data[16] = temp1_byte
            temp_data[17] = 13    
            temp_data[18] = 10    
        endif
    endif
    if (data_in[2] == "p") then
            if (data_in[3] == "n") then
                gosub sendDataOK
            endif
    endif
    if (temp_data[0] == 0) then
        gosub sendDataError
    endif
endif

data_out[0]=Fifo_status 'Read FIFO status
num_byte=1
gosub spi_read
val= data_in[1] 'FIFO status register
if val.0=0 then lop 'test RX_EMPTY=1, RX_FIFO empty
data_out[0]=Write_reg+Stat_us 'reset RX_DR status bit
data_out[1]=%01000000 'write 1 tp RX_DR to reset IRQ
num_byte=1
gosub spi_write
pause 2 'wait 2ms Rx<->Tx
GOTO Main_rx
end

disable
intManagement:
        if (INTCON.2 == 1) then
           ticks = ticks + 1      ' Count pieces of seconds
           If ticks < 31 Then tiexit
           ticks = 0
           seconds = seconds + 1
           if (ALEnterCounter > 0) then
                ALEnterCounter = ALEnterCounter - 1
                if (ALEnterCounter == 0) && (alstatus == 4) then
                      alstatus = 5                      
                endif
           endif
           if (ALLeaveCounter > 0) then
               ALLeaveCounter = ALLeaveCounter - 1
               if (ALLeaveCounter == 0) && (alstatus == 3) then
                    alstatus = 1
               endif 
           endif
           if (alarm == 1) THEN
               if (alarmCounter > 0) then
                    if (ALSTATUS == 1) then
                        'we have alarm detection
                        READ 10, ALEnterCounter
                        if (ALEnterCounter == 0) then
                            ALSTATUS = 5
                        else
                            ALSTATUS = 4
                        endif
                    endif
                    if (l1onAlarm = 1) then
                        seconds = 0
                        read 8, l1counter
                        gosub highRelay
                    endif                    
                    alarmCounter = 0
               else
                    alarmCounter = alarmCounter + 1
               endif
           endif
           if (relay_alarm_counter > 0) then
               relay_alarm_counter = relay_alarm_counter - 1
               if (relay_alarm_counter == 0) then
                    input alarm
               endif 
           endif
           if seconds < 59 then tiexit
           seconds = 0
           if (l1counter > 0) then
               l1counter = l1counter - 1
               if (l1counter == 0) then
                    gosub lowrelay
               endif
           endif           
           tiexit: 
           INTCON.2 = 0
        endif
        INTCON.7 = 1
resume
enable

sendDataOK:
    temp_data[0] = "O"
    temp_data[1] = "K"
    temp_data[2] = 13
    temp_data[3] = 10
return

sendDataError:
        temp_data[0] = "E"
        temp_data[1] = "R"
        temp_data[2] = "R"
        temp_data[3] = "O"
        temp_data[4] = "R"
        temp_data[5] = 13
        temp_data[6] = 10
return

convertInputData:
    conversionSuccess = 0
    TEMP_BYTE="a"
    for k=0 to 2    
        TEMP1_BYTE = "a"
        TEMP2_BYTE = data_in[i]
        if (TEMP2_BYTE == "|") then return
        GOSUB lookupChar
        if (TEMP1_BYTE == "a") then return 
        if (k==0) then 
            TEMP_BYTE = TEMP1_BYTE 
            conversionSuccess = 1
        else 
            TEMP_BYTE = TEMP_BYTE*10 + TEMP1_BYTE 
            conversionSuccess = 1
        endif
        i = i + 1
    next k
return

lookupChar:
    LOOKDOWN temp2_byte,["0123456789"], temp1_byte
RETURN

convertNoToStr:
        temp3_byte = (temp_byte DIG 2) + $30
        temp2_byte = (temp_byte DIG 1) + $30
        temp1_byte = (temp_byte DIG 0) + $30
return

highRelay:
if (relay == 0) then
    relay_alarm_counter = 4
    output alarm
    low alarm
    high relay
endif
return

lowRelay:
if (relay == 1) then
    relay_alarm_counter = 4
    output alarm
    low alarm
    low relay
endif
return
