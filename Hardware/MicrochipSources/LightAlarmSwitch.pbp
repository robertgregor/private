'@  __config _INTRC_OSC_NOCLKOUT & _WDT_ON & _MCLRE_OFF & _CP_OFF & _CPD_OFF & _FCMEN_OFF & _IESO_OFF & _BOR_ON & _PWRTE_ON
                 
@ DEVICE PIC16F690,INTRC_OSC_NOCLKOUT
@ DEVICE PIC16F690,WDT_ON
@ DEVICE PIC16F690,MCLR_OFF
@ DEVICE PIC16F690,CPD_OFF
@ DEVICE PIC16F690,BOD_ON
@ DEVICE PIC16F690,PWRT_ON

'EEPROM_MAP
'0 - channel number
'1,2,3,4,5 bank name transmitter
'6,7,8,9 bank name device
'10 device id
'11 - 0 switch on when applied power
'12 timeout
'13 1 - on when movement detected 0 no action
'14 - alarm enter timeout
'15 - alarm leave timeout

EEPROM  0, [40,"R","E","M","O","T","E","H","O","M",0,1,0,0,0,0]

 INCLUDE "RFM73.pbp"

 DEFINE OSC 8

 OSCCON = %01110000 ' Internal 8MHz osc
 ANSEL = 0
 ANSELH = 0
 CM1CON0 = 0
 CM2CON0 = 0
 
'interrupt for timer
INTCON = %10100000
PIE1 = %00000000
OPTION_REG = %00000111

on interrupt goto intManagement
ENABLE

'-----------init----------------------------------------------------------------
TRISA = %00000000 'Set PORTA to all output
TRISB = %00110000 'Set , SDI input
TRISC = %00000110 'Set IRQ input, 
WPUA = %00000000
WPUB = %00100000


alarm VAR PORTC.1
alarmCounter VAR byte
RES var PORTB.5
RELAY VAR PORTA.4
i VAR BYTE 'loop counter
j var byte
relay_alarm_counter var byte
configure var byte
temp_byte_int var byte
temp_byte var byte
temp1_byte var byte
temp2_byte var byte
temp3_byte var byte
temp4_byte var byte
temp_word var word
ALSTATUS VAR BYTE '0 disabled, 1 enabled, 2 activated, 3 leave timeout running, 4 enter timeout running
ALEnterCounter VAR BYTE
ALLeaveCounter VAR BYTE
l1counter var byte
l1onAlarm var byte
conversionSuccess var byte

startLabel:
clear
read 10, device_id
read 13, l1onAlarm
input alarm
input RES
output relay
read 11, temp_byte
if (temp_byte == 0) then 
    gosub highRelay
else
    gosub lowrelay
endif
gosub initModule
commonSettings:
gosub commonRXTX

'============Main Rx============================================================
Main_rx:
gosub setup_rx 'setup Rx
pause 2 'delay for Rx starting
Ce=1 'set nRF24L01 in Rx mode
irqLoop:
'Check for data to send
if RES == 0 then
    disable
    write 0, 40
    write 1, "R"
    write 2, "E"
    write 3, "M"
    write 4, "O"
    write 5, "T"
    write 6, "E"
    write 7, "H"
    write 8, "O"
    write 9, "M"
    write 10, 0
    write 11, 1
    write 12, 0
    write 13, 0
    write 14, 0
    write 15, 0
    enable
    pause 1000
    goto startLabel
endif
if (temp_data[0] != 0) then
    if (configure == 1) then
        gosub commonRXTX
        configure = 0
    endif
    gosub sendData
    temp_data[0] = 0
    GOTO main_rx
endif
'send alarm notification
if (ALSTATUS == 5) then
    ALSTATUS = 2
    temp_data[0] = "A"
    temp_data[1] = "L"
    temp_data[2] = "A"
    temp_data[3] = "R"
    temp_data[4] = "M"
    temp_data[5] = 13
    temp_data[6] = 10
endif
If Irq !=0 then irqLoop 'wait until IRQ, active low
Ce=0
lop:
disable
gosub ackData
temp_data[0] = 0
if (data_received[1] == device_id) then
    if (data_received[2] == "c") then    
        if (data_received[3] == "=") then
           'OK it is configure
            for i = 0 to 10
                disable
                write i, data_received[i+4]
                enable
            next i
            read 10, device_id
            pause 250
            configure = 1
            gosub sendDataOK
        endif
    endif
    if (data_received[2] == "l") then
        if (data_received[3] == "1") then
            if (data_received[4] == "c") then
                if (data_received[5] == "o") then
                    disable
                    write 11, 0
                    enable
                    gosub sendDataOK
                endif
                if (data_received[5] == "f") then
                    disable
                    write 11, 1
                    enable
                    gosub sendDataOK
                endif
                if (data_received[5] == "d") then
                    disable
                    write 13, 1
                    enable
                    l1onAlarm = 1
                    gosub sendDataOK
                endif
                if (data_received[5] == "c") then
                    disable
                    write 13, 0
                    enable
                    l1onAlarm = 0
                    gosub sendDataOK
                endif                
                if (data_received[5] == "t") then
                    if (data_received[6] == "=") then
                        i = 7
                        gosub convertInputData
                        if (conversionSuccess == 1) then
                            disable
                            write 12, temp_byte
                            enable
                            gosub sendDataOK
                        else
                            gosub sendDataError
                        endif
                    endif
                endif                
            endif
            if (data_received[4] == "o") then
                if (data_received[5] == "f") then
                    seconds = 0
                    read 12, l1counter
                    gosub highRelay
                else
                    gosub highRelay
                    l1counter = 0
                endif
                gosub sendDataOK
            endif
            if (data_received[4] == "f") then
                gosub LOWrelay
                gosub sendDataOK
            endif
        endif
    endif
    if (data_received[2] == "a") then
        if (data_received[3] == "l") then 
            if (data_received[4] == "a") then
                read 15, ALLeaveCounter
                ALEnterCounter = 0
                if (ALLeaveCounter == 0) then
                    alstatus = 1
                else
                    alstatus = 3
                endif
                gosub sendDataOK
            endif
            if (data_received[4] == "d") then
                alstatus = 0
                ALLeaveCounter = 0
                ALEnterCounter = 0
                gosub sendDataOK
            endif
            if (data_received[4] == "c") then
                if (data_received[6] == "=") then
                    i = 7
                    gosub convertInputData
                    if (conversionSuccess == 1) then
                        if (data_received[5] == "e") then
                            disable
                            write 14, temp_byte
                            enable
                            gosub sendDataOK
                        endif
                        if (data_received[5] == "l") then
                            disable
                            write 15, temp_byte
                            enable
                            gosub sendDataOK
                        endif
                    endif
                endif
            endif
        endif
    endif
    if (data_received[2] == "s") then
        if (data_received[3] == "a") then
            temp_data[0] = "1"
            temp_data[1] = "|"
            temp_data[2] = "a"
            temp_data[3] = "|"
            temp_data[4] = ALSTATUS + $30
            temp_data[5] = "|"
            temp_data[6] = alarm + $30
            temp_data[7] = "|"
            read 14, temp_byte 
            gosub convertNoToStr
            temp_data[8] = temp3_byte
            temp_data[9] = temp2_byte
            temp_data[10] = temp1_byte
            temp_data[11] = "|"
            read 15, temp_byte 
            gosub convertNoToStr
            temp_data[12] = temp3_byte
            temp_data[13] = temp2_byte
            temp_data[14] = temp1_byte
            temp_data[15] = 13            
            temp_data[16] = 10            
        endif
        if (data_received[3] == "c") then
            temp_data[0] = "1"
            temp_data[1] = "|"
            temp_data[2] = "c"
            temp_data[3] = "|"
            temp_data[4] = RELAY + $30
            temp_data[5] = "|"
            read 11, temp_data[6]
            temp_data[6] = temp_data[6] + $30        
            temp_data[7] = "|"
            read 13, temp_data[8]
            temp_data[8] = temp_data[8] + $30        
            temp_data[9] = "|"
            read 12, temp_byte
            gosub convertNoToStr
            temp_data[10] = temp3_byte
            temp_data[11] = temp2_byte
            temp_data[12] = temp1_byte
            temp_data[13] = "|"
            temp_byte = l1counter
            gosub convertNoToStr
            temp_data[14] = temp3_byte
            temp_data[15] = temp2_byte
            temp_data[16] = temp1_byte
            temp_data[17] = 13    
            temp_data[18] = 10    
        endif
    endif
    if (data_received[2] == "p") then
            if (data_received[3] == "n") then
                gosub sendDataOK
            endif
    endif
    if (temp_data[0] == 0) then
        gosub sendDataError
    endif
endif
enable
GOTO Main_rx
end

disable
intManagement:
        if (INTCON.2 == 1) then
           ticks = ticks + 1      ' Count pieces of seconds
           if ticks = 10 then
                    for interi=0 to payloadLengthD - 1
                        data_received[interi] = 0
                    next interi
           endif
           If ticks < 31 Then tiexit
           ticks = 0
           seconds = seconds + 1
           if (ALEnterCounter > 0) then
                ALEnterCounter = ALEnterCounter - 1
                if (ALEnterCounter == 0) && (alstatus == 4) then
                      alstatus = 5                      
                endif
           endif
           if (ALLeaveCounter > 0) then
               ALLeaveCounter = ALLeaveCounter - 1
               if (ALLeaveCounter == 0) && (alstatus == 3) then
                    alstatus = 1
               endif 
           endif
           if (alarm == 1) THEN
               if (alarmCounter > 0) then
                    if (ALSTATUS == 1) then
                        'we have alarm detection
                        READ 14, ALEnterCounter
                        if (ALEnterCounter == 0) then
                            ALSTATUS = 5
                        else
                            ALSTATUS = 4
                        endif
                    endif
                    if (l1onAlarm = 1) then
                        seconds = 0
                        read 12, l1counter
                        gosub highRelay
                    endif                    
                    alarmCounter = 0
               else
                    alarmCounter = alarmCounter + 1
               endif
           endif
           if (relay_alarm_counter > 0) then
               relay_alarm_counter = relay_alarm_counter - 1
               if (relay_alarm_counter == 0) then
                    input alarm
               endif 
           endif
           if seconds < 59 then tiexit
           seconds = 0
           if (l1counter > 0) then
               l1counter = l1counter - 1
               if (l1counter == 0) then
                    gosub lowrelay
               endif
           endif           
           tiexit: 
           INTCON.2 = 0
        endif
        INTCON.7 = 1
resume
enable

sendDataOK:
    temp_data[0] = "O"
    temp_data[1] = "K"
    temp_data[2] = 13
    temp_data[3] = 10
return

sendDataError:
        temp_data[0] = "E"
        temp_data[1] = "R"
        temp_data[2] = "R"
        temp_data[3] = "O"
        temp_data[4] = "R"
        temp_data[5] = 13
        temp_data[6] = 10
return

convertInputData:
    conversionSuccess = 0
    TEMP_BYTE="a"
    for k=0 to 2    
        TEMP1_BYTE = "a"
        TEMP2_BYTE = data_received[i]
        if (TEMP2_BYTE == "|") then return
        GOSUB lookupChar
        if (TEMP1_BYTE == "a") then return 
        if (k==0) then 
            TEMP_BYTE = TEMP1_BYTE 
            conversionSuccess = 1
        else 
            TEMP_BYTE = TEMP_BYTE*10 + TEMP1_BYTE 
            conversionSuccess = 1
        endif
        i = i + 1
    next k
return

lookupChar:
    LOOKDOWN temp2_byte,["0123456789"], temp1_byte
RETURN

convertNoToStr:
        temp3_byte = (temp_byte DIG 2) + $30
        temp2_byte = (temp_byte DIG 1) + $30
        temp1_byte = (temp_byte DIG 0) + $30
return

highRelay:
if (relay == 0) then
    relay_alarm_counter = 4
    output alarm
    low alarm
    high relay
endif
return

lowRelay:
if (relay == 1) then
    relay_alarm_counter = 4
    output alarm
    low alarm
    low relay
endif
return

setRxAddressPipe:
READ 6, data_out[1]
READ 7, data_out[2]
READ 8, data_out[3]
READ 9, data_out[4]
data_out[5] = device_id
return

setTxAddressPipe:
READ 1, data_out[1]
READ 2, data_out[2]
READ 3, data_out[3]
READ 4, data_out[4]
READ 5, data_out[5]
return
