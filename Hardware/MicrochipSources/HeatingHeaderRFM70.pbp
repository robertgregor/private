'@  __config _INTRC_OSC_NOCLKOUT & _WDT_ON & _MCLRE_OFF & _CP_OFF & _CPD_OFF & _FCMEN_OFF & _IESO_OFF & _BOR_ON & _PWRTE_ON
                 
@ DEVICE PIC16F690,INTRC_OSC_NOCLKOUT
@ DEVICE PIC16F690,WDT_ON
@ DEVICE PIC16F690,MCLR_OFF
@ DEVICE PIC16F690,CPD_OFF
@ DEVICE PIC16F690,BOD_ON
@ DEVICE PIC16F690,PWRT_ON

'EEPROM_MAP
'0 - channel number
'1,2,3,4,5 bank name
'6 device id
'7 full range highByte
'8 full range lowbyte
'9 interval
'10 temperature - it is temperature / 2
'11 analog percentage

INCLUDE "RFM70.pbp"

EEPROM  0, [40,"R","O","B","I","K",0,0,0,0,44,95,0,0,0,0]

 DEFINE OSC 8
 DEFINE HSER_TXSTA 24h
 DEFINE HSER_SPBRG 51
 DEFINE HSER_CLROERR 1

 DEFINE ADC_BITS 10 ' ADCIN resolution (Bits)
 DEFINE ADC_CLOCK 3 ' ADC clock source (Fosc/32)
 DEFINE ADC_SAMPLEUS 50 ' ADC sampling time (uSec)
 ADCON0.7 = 1
 
 OSCCON = %01110000 ' Internal 8MHz osc
 ANSEL = 0
 ANSELH = %00001000
 CM1CON0 = 0
 CM2CON0 = 0
 
 'interrupt for timer
 INTCON = %10100000
 PIE1 = %00000000
 OPTION_REG = %00000100

on interrupt goto intManagement
ENABLE
'-----------init----------------------------------------------------------------
TRISA = %00110000 'Set PORTA to all output
TRISB = %00110000 'Set , SDI input
TRISC = %00000100 'Set IRQ input, 

HEATING_SENSOR var PORTA.4
HEATING_SENSOR_power var PORTC.1
MOTOR_1 var PORTC.4
MOTOR_2 var PORTC.5
MOVE_SENSOR_POWER VAR PORTC.3
MOVE_SENSOR VAR PORTA.5
ANALOG_INPUT_MOTOR VAR PORTB.5
moveSensorPrevious var byte
motorRunning VAR byte
motorFullRangeTicks var word
motorCurrentTicks var word
motorExpectedTicks var word
motorTicksSecond var word
motorAnalogValue var WORD
motorAnalogValueTmp var WORD
motorAnalogValueSeconds var WORD
motorAnalogValueTmpTicks var WORD
ANALOG_PERCENTAGE var byte
mode var byte

i VAR BYTE 'loop counter
j var byte
ci var byte
configure var byte
temp_byte_int var byte
temp_byte var byte
temp1_byte var byte
temp2_byte var byte
temp3_byte var byte
temp_word var word
temp_word_int var word
seconds  var     byte   ' Define second variable
ticks   var     byte    ' Define pieces of seconds variable
l1counter var byte
conversionSuccess VAR BYTE
Dummy       VAR BYTE
TempC       VAR WORD
Float       VAR WORD        
temperature var word
busy        var BIT
VDD VAR WORD
sleep_period var word
temperatureExp var byte

clear
input MOVE_SENSOR
read 6, device_id
READ 7, motorFullRangeTicks.highbyte
read 8, motorFullRangeTicks.lowbyte
read 9, sleep_period
read 10, temperatureExp
read 11, ANALOG_PERCENTAGE
gosub motorStopInt
gosub initModule
if (device_id != 0) then mode = 4
commonSettings:
gosub commonRXTX
 
'============Main Rx============================================================
Main_rx:
gosub setup_rx 'setup Rx
pause 2 'delay for Rx starting
Ce=1 'set nRF24L01 in Rx mode
irqLoop:
if (mode == 1) then
    if (sleep_period != 0) then
       mode = 2
       seconds = 0
       ticks = 0
      'ok send status wait for the response 2 seconds and sleep sleep_time seconds
      gosub sendTemperature
    endif
endif
if (mode == 3) then
      if (motorRunning == 0) then
          gosub sendCurrentPosition
          gosub setModeBasedOnSleepPeriod
      endif
endif
'Check for data to send
if (temp_data[0] != 0) then
    if (configure == 1) then
        gosub commonRXTX
        mode = 4
        configure = 0
    endif
    gosub sendData
    temp_data[0] = 0
    GOTO main_rx
endif
if (mode == 2) then
    if (seconds > 2) then
        'OK, if the expected temperature is set set the head
      if (temperatureExp != 0) then
         if (temperature.11 != 1) then                          
             if (temperatureExp > temp3_byte) then
                temp2_byte = temperatureExp - temp3_byte
                if (temp3_byte < 7) then
                    temp_byte = 0
                elseif (temp2_byte == 3) then
                    temp_byte = 50
                elseif (temp2_byte == 2) then
                    temp_byte = 60
                elseif (temp2_byte == 1) then
                    temp_byte = 75
                else
                    temp_byte = 0
                endif
             else
                temp_byte = 100
             endif
         else
            'temperature is minus open the valve
            temp_byte = 0          
         endif
         gosub setup_sleep
         gosub setValveToPosition
         dummy = 0
         waitMotorStop:
         if (motorRunning != 0) then
                dummy = 1
                goto waitMotorStop
         endif
         gosub commonRXTX
         if (dummy == 1) then 
             gosub sendCurrentPosition
             gosub sendData
             temp_data[0] = 0
         endif
      endif      
      disable
      INTCON = 0
      OSCCON = %00010000
      pause 1
      gosub setup_sleep
      pause 1
      sleep sleep_period * 10
      pause 1
      seconds = 0
      ticks = 0
      OSCCON = %01110000
      pause 1
      INTCON = %10100000
      OPTION_REG = %00000100
      enable
      mode = 1
      goto commonSettings
   endif
endif
if (mode == 4) then
    temp_data[0] = "A"
    temp_data[1] = "s"
    temp_data[2] = 13
    temp_data[3] = 10
    motorAnalogValue = 0
    motorAnalogValueSeconds = 0
    motorAnalogValueTmpTicks = 0
    motorAnalogValueTmp = 0
    mode = 5    
    gosub MotorOpenHead
endif
if (mode == 5) then
    if (motorRunning == 0) then
        motorAnalogValue = 0
        motorAnalogValueSeconds = 0
        motorAnalogValueTmpTicks = 0
        motorAnalogValueTmp = 0
        mode = 6
        motorCurrentTicks = 0
        gosub MotorCloseHead
    endif
endif
if (mode == 6) then
    if (motorRunning == 0) then
        motorFullRangeTicks = motorCurrentTicks
        write 7, motorFullRangeTicks.highbyte
        write 8, motorFullRangeTicks.lowbyte
        TEMP_data[0] = "A"
        TEMP_data[1] = "e"
        gosub setModeBasedOnSleepPeriod    
    endif
endif
if (mode > 2) then irqLoop
If Irq !=0 then irqLoop 'wait until IRQ, active low
Ce=0
lop:
data_out[0]=rd_rx_pload 'Read 5 bytes Rx pload
num_byte=payloadLength
gosub spi_read
temp_data[0] = 0
if (data_in[1] == device_id) then
    if (data_in[2] == "c") then    
        if (data_in[3] == "=") then
            'OK it is configure
            write 0, data_in[9] 'channel
            write 1, data_in[4] 'password 0
            write 2, data_in[5] 'password 1
            write 3, data_in[6] 'password 2
            write 4, data_in[7] 'password 3
            write 5, data_in[8] 'password 4
            write 6, data_in[10]'device id
            device_id = data_in[10]
            pause 10
            configure = 1
            gosub sendDataOK
        endif
    ELSEif (data_in[2] == "a") then
            mode = 4
            gosub sendDataOK
    elseif (data_in[2] == "p") then
            gosub sendDataOK
    ELSEif (data_in[2] == "s") then    
            gosub sendTemperature
    else
        if (data_in[3] == "=") then
            i = 4
            gosub convertInputData
        endif
        if (data_in[2] == "l") then
            if (temp_byte < 101) then 
                  gosub setValveToPosition
                  gosub sendDataOK
            endif
        elseif (data_in[2] == "m") then   
             write 9, temp_byte
             sleep_period = temp_byte
             gosub setModeBasedOnSleepPeriod
             gosub sendDataOK
        elseif (data_in[2] == "t") then 
             write 10, temp_byte
             temperatureExp = temp_byte
             gosub sendDataOK
        elseif (data_in[2] == "n") then 
             write 11, temp_byte
             ANALOG_PERCENTAGE = temp_byte
             gosub sendDataOK
        endif
    endif
    if (temp_data[0] == 0) then
        temp_data[0] = "E"
        temp_data[1] = "R"
        temp_data[2] = "R"
        temp_data[3] = "O"
        temp_data[4] = "R"
        temp_data[5] = 10
    endif
endif

data_out[0]=Fifo_status 'Read FIFO status
num_byte=1
gosub spi_read
val= data_in[1] 'FIFO status register
if val.0=0 then lop 'test RX_EMPTY=1, RX_FIFO empty
data_out[0]=Write_reg+Stat_us 'reset RX_DR status bit
data_out[1]=%01000000 'write 1 tp RX_DR to reset IRQ
num_byte=1
gosub spi_write
pause 2 'wait 2ms Rx<->Tx
GOTO Main_rx
end

disable
intManagement:
        if (INTCON.2 == 1) then
           ticks = ticks + 1      ' Count pieces of seconds
           if (motorRunning != 0) then
                if (MOVE_SENSOR != moveSensorPrevious) then
                    if (motorRunning == 1) then 
                        motorCurrentTicks = motorCurrentTicks + 1
                    else
                        motorCurrentTicks = motorCurrentTicks - 1
                    endif
                    moveSensorPrevious = MOVE_SENSOR
                endif
                if (motorCurrentTicks == motorExpectedTicks) then
                    if (mode == 3) then
                        gosub motorStopInt
                    endif
                endif
                if ((ticks // 40) == 0) then
                    if (mode > 3) then
                            'headAdaptation
                            ADCIN 11, temp_word_int
                            motorAnalogValueTmp = motorAnalogValueTmp + temp_word_int
                            motorAnalogValueTmpTicks = motorAnalogValueTmpTicks + 1                            
                    endif
                endif
           endif
           If ticks < 241 Then tiexit
           if (motorRunning != 0) then
                if (motorCurrentTicks == motorTicksSecond) then
                    gosub motorStopInt
                endif
                motorTicksSecond = motorCurrentTicks 
           endif
           if (mode > 3) then
               if (motorRunning != 0) then
                  temp_word_int = (motorAnalogValueTmp / motorAnalogValueTmpTicks)*10
                  if (seconds == 2) then                          
                        motorAnalogValue = temp_word_int / 100
                  endif
                  motorAnalogValueTmp = 0
                  motorAnalogValueTmpTicks = 0
                  if (temp_word_int/motorAnalogValue) < ANALOG_PERCENTAGE then
                      gosub motorStopInt  
                  endif
               endif
           endif
           ticks = 0
           seconds = seconds + 1
           if seconds <= 58 then tiexit
           seconds = 0
           tiexit: 
           INTCON.2 = 0
        endif
        INTCON.7 = 1
resume

motorStopInt:
        low MOTOR_1
        low MOTOR_2
        motorRunning = 0
        LOW MOVE_SENSOR_power
return

enable

sendDataOK:
    temp_data[0] = "O"
    temp_data[1] = "K"
    temp_data[2] = 10
return

convertInputData:
    conversionSuccess = 0
    TEMP_BYTE="a"
    for ci=0 to 2    
        TEMP1_BYTE = "a"
        TEMP2_BYTE = data_in[i]
        if (TEMP2_BYTE == "|") then return
        GOSUB lookupChar
        if (TEMP1_BYTE == "a") then return 
        if (ci==0) then 
            TEMP_BYTE = TEMP1_BYTE
            conversionSuccess = 1 
        else 
            TEMP_BYTE = TEMP_BYTE*10 + TEMP1_BYTE
            conversionSuccess = 1
        endif
        i = i + 1
    next ci
return

lookupChar:
    LOOKDOWN temp2_byte,["0123456789"], temp1_byte
RETURN

convertNoToStr:
        temp3_byte = (temp_byte DIG 2) + $30
        temp2_byte = (temp_byte DIG 1) + $30
        temp1_byte = (temp_byte DIG 0) + $30
return

MotorOpenHead:
    motorRunning = 2
    HIGH MOTOR_1
    LOW MOTOR_2
    high MOVE_SENSOR_power
    motorTicksSecond = 0
    ticks = 0
    seconds = 0
return

motorCloseHead:
    motorRunning = 1
    HIGH MOTOR_2
    LOW MOTOR_1
    high MOVE_SENSOR_power
    motorTicksSecond = 0
    ticks = 0
    seconds = 0
return

setValveToPosition:
      disable
          temp_word = (motorFullRangeTicks * temp_byte) 
          motorExpectedTicks = DIV32 100   
      enable
      mode = 3
      if (motorExpectedTicks != motorCurrentTicks) THEN
          if (motorExpectedTicks > motorCurrentTicks) then
              GOSUB MotorCloseHead            
          else
              GOSUB MotorOpenHead            
          endif
      endif
return

sendCurrentPosition:
      temp_data[0] = "l"
      i=1
      gosub printCurrentTicks
return

printCurrentTicks:
        temp_data[i] = "|"
        temp_byte = (motorCurrentTicks * 10) / (motorFullRangeTicks / 10)
        i=i+1
        gosub printByteToTempByte
        temp_data[i+3] = 13
        temp_data[i+4] = 10
return

printByteToTempByte:        
        temp_data[i] = (temp_byte DIG 2) + $30
print2LastBytesToTempByte:
        temp_data[i+1] = (temp_byte DIG 1) + $30
        temp_data[i+2] = (temp_byte DIG 0) + $30
return

sendTemperature:
    high HEATING_SENSOR_power
    pause 2
   'read current temperature    
   OWOUT HEATING_SENSOR, 1, [$CC, $44] 'Skip ROM search & do temp conversion
Wait_Up:
   OWIN HEATING_SENSOR, 4, [Busy]      'Read busy-bit
   IF Busy = 0 THEN goto Wait_Up            'Still busy..?, Wait_Up..!
   OWOUT HEATING_SENSOR, 1, [$CC, $BE] 'Skip ROM search & read scratchpad memory
   OWIN HEATING_SENSOR, 2, [temperature.Lowbyte, temperature.Highbyte] 'Read two bytes / end comms
   low HEATING_SENSOR_power
   temp_data[0] = "4"
   temp_data[1] = "|"
   if (temperature.11 == 1) then
        temp_data[2] = "-"
        disable
        Dummy = 625 * (~temperature+1)
        TempC = DIV32 10
        enable
        temp_data[3] = (TempC DIG 4) + $30
        temp_data[4] = (TempC DIG 3) + $30
   else
        disable
        Dummy = 625 * temperature
        TempC = DIV32 10
        enable
        TempC  = (temperature & $0FF0) >> 4 ' Mask middle 8-bits, shift into lower byte
        Float = ((temperature.Lowbyte & $0F) * 625) ' Lower 4-bits of result * 625
        temp_data[2] = (TempC DIG 1) + $30
        temp_data[3] = (TempC DIG 0) + $30
        temp_data[4] = (Float DIG 3) + $30
        temp3_byte = TempC.lowbyte * 2
        if ((temp_data[4] - $30) > 4) then temp3_byte = temp3_byte + 1
   endif
        'read baterry        
        VRCON.4 = 1 ; Turn 0.6V reference ON
        PAUSEUS 200 ; Allow VP6 to settle
        ADCIN 13, temp_word ; get VP6 analog reading (10-bit)
        VRCON.4 = 0 ; Turn 0.6V reference OFF
        VDD = 6138 / temp_word ; convert to voltage ve vdd je 25 = 2,5 V        
        temp_data[5] = "|"
        temp_data[6] = (VDD DIG 1) + $30
        temp_data[7] = (VDD DIG 0) + $30
        temp_data[8] = "|"
        temp_byte = sleep_period / 10
        i=9
        gosub printByteToTempByte
        temp_data[12] = "|"
        i=12
        temp_byte = temperatureExp
        gosub print2LastBytesToTempByte
        i=15
        gosub printCurrentTicks
return

setModeBasedOnSleepPeriod:
    if (device_id == 0) then
        mode = 0
    else 
        if (sleep_period == 0) then 
            mode = 0
        else     
            mode = 1
        endif
    endif
return

resetValues:
    write 0, 40
    write 1, "R"
    write 2, "O"
    write 3, "B"
    write 4, "I"
    write 5, "K"
    write 6, 0
    write 7, 0
    write 8, 0
    write 9, 0
    write 10, 44
    write 11, 90
return
