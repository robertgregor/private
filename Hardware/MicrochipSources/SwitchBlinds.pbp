'@  __config _INTRC_OSC_NOCLKOUT & _WDT_ON & _MCLRE_OFF & _CP_OFF & _CPD_OFF & _FCMEN_OFF & _IESO_OFF & _BOR_ON & _PWRTE_ON
                 
@ DEVICE PIC16F690,INTRC_OSC_NOCLKOUT
@ DEVICE PIC16F690,WDT_ON
@ DEVICE PIC16F690,MCLR_OFF
@ DEVICE PIC16F690,CPD_OFF
@ DEVICE PIC16F690,BOD_ON
@ DEVICE PIC16F690,PWRT_ON

'EEPROM_MAP
'0 - channel number
'1,2,3,4,5 bank name transmitter
'6,7,8,9 bank name device
'10 device id
'11 timeout value

EEPROM  0, [40,"R","E","M","O","T","E","H","O","M",0,1,0,0,0,0]

INCLUDE "RFM73.pbp"

 DEFINE OSC 8

 OSCCON = %01110000 ' Internal 8MHz osc
 ANSEL = 0
 ANSELH = 0
 CM1CON0 = 0
 CM2CON0 = 0
 
 'interrupt for timer
    INTCON = %10100000  'T01 enabled PEIE disabled.
    PIE1 = %00000000    'USART disabled
    OPTION_REG = %00000111

on interrupt goto intManagement
ENABLE
'-----------init----------------------------------------------------------------
TRISA = %00000000 'Set PORTA to all output
TRISB = %00110000 'Set , SDI input
TRISC = %00000100 'Set IRQ input, 
WPUA = %00000000
WPUB = %00100000

RELAY_DOWN VAR PORTA.5
RELAY_UP VAR PORTA.4
RES var PORTB.5

i VAR BYTE 'loop counter
j var byte
ci var byte
configure var byte
temp_byte_int var byte
temp_byte var byte
temp1_byte var byte
temp2_byte var byte
temp3_byte var byte
temp_word var word
temp2_word var word
temp3_word var word
EEPROMBYTE      VAR BYTE
EEPROMPOSITION  VAR BYTE
counter var word
initialCounter var word
initialPercent var byte
conversionSuccess VAR BYTE
timeout_value var word
currentCounter var byte
currentDirection var byte

startProgram:
clear
gosub stopBlindsSilent
read 10, device_id
read 11, timeout_value
timeout_value = timeout_value * 30

output RELAY_DOWN
output RELAY_UP
input RES
gosub initModule

commonSettings:
gosub commonRXTX
gosub commonRXTX

'============Main Rx============================================================
Main_rx:
gosub setup_rx 'setup Rx
pause 2 'delay for Rx starting
Ce=1 'set nRF24L01 in Rx mode
irqLoop:
if RES == 0 then
    disable
    write 0, 40
    write 1, "R"
    write 2, "E"
    write 3, "M"
    write 4, "O"
    write 5, "T"
    write 6, "E"
    write 7, "H"
    write 8, "O"
    write 9, "M"
    write 10, 0
    write 11, 1
    enable
    pause 1000
    goto startProgram
endif
'Check for data to send
if (temp_data[0] != 0) then
    if (configure == 1) then
        gosub commonRXTX
        configure = 0
    endif
    gosub sendData
    temp_data[0] = 0
    GOTO main_rx
endif
If Irq !=0 then irqLoop 'wait until IRQ, active low
Ce=0
lop:
disable
gosub ackData
temp_data[0] = 0
if (data_received[1] == device_id) then
    if (data_received[2] == "c") then    
        if (data_received[3] == "=") then
           'OK it is configure
            for i = 0 to 10
                disable
                write i, data_received[i+4]
                enable
            next i
            read 10, device_id
            pause 250
            configure = 1
            gosub sendDataOK
        endif
    else
     if (data_received[2] == "b") then
        if (data_received[3] == "t") then
            if (data_received[4] == "=") then
                i = 5
                gosub convertInputData
                if (conversionSuccess == 1) then
                     disable
                     write 11, temp_byte
                     enable
                     timeout_value = temp_byte * 30
                     gosub sendDataOK
                endif                                   
            endif
        else
         if (timeout_value == 0) then
            'timeout not set send error
         else
          if (data_received[3] == "d") then
            counter = timeout_value
            initialcounter = counter
            gosub blindsDown
            initialPercent = currentCounter
            currentCounter = 100
            gosub sendDataOK
          else
           if (data_received[3] == "u") then
            counter = timeout_value
            initialCounter = counter
            gosub blindsup
            initialPercent = currentCounter            
            currentCounter = 0
            gosub sendDataOK
           else
            if (data_received[3] == "m") then
             if (data_received[4] == "=") then
                i = 5
                gosub convertInputData
                if (conversionSuccess == 1) then
                  if (temp_byte < 101) then
                    if (temp_byte == currentCounter) then
                        gosub sendDataOK
                        counter = 4
                    else
                     if (temp_byte > currentCounter) then
                        temp2_byte = temp_byte - currentCounter
                        initialPercent = currentCounter
                        gosub computeCounter
                        initialCounter = counter
                        gosub blindsDown
                        currentCounter = temp_byte
                        gosub sendDataOK
                     else
                        temp2_byte = currentCounter - temp_byte
                        initialPercent = currentCounter
                        gosub computeCounter
                        initialCounter = counter
                        gosub blindsUp
                        currentCounter = temp_byte
                        gosub sendDataOK
                     endif
                    endif
                  endif  
                endif                                                   
             endif
            else
             if (data_received[3] == "s") then
              if (currentDirection != 0) then
                temp_word = initialCounter - counter
                disable
                temp_word = temp_word * 100
                temp2_word = DIV32 timeout_value
                enable
                if (currentDirection == 1) then
                    temp3_word = initialPercent + temp2_word
                    if (temp3_word > 100 ) then temp3_word = 100
                    currentCounter = temp3_word
                else
                 if (currentDirection == 2) then
                    if (initialPercent > temp2_word) then
                        currentCounter = initialPercent - temp2_word
                    else
                        currentCounter = 0
                    endif
                 endif
                endif
                gosub sendDataOK
                counter = 4
              else
                gosub sendDataOK            
                counter = 4
              endif
             endif
            endif
           endif
          endif
         endif
        endif
     else
      if (data_received[2] == "s") then
            temp_data[0] = "5"
            temp_data[1] = "|"
            temp_data[2] = RELAY_DOWN + $30
            temp_data[3] = "|"
            temp_data[4] = RELAY_UP + $30
            temp_data[5] = "|"            
            temp_byte = timeout_value / 30
            gosub convertNoToStr
            temp_data[6] = temp3_byte
            temp_data[7] = temp2_byte
            temp_data[8] = temp1_byte
            temp_data[9] = "|"            
            'temp_byte = currentCounter
            temp_byte = seconds
            gosub convertNoToStr
            temp_data[10] = temp3_byte
            temp_data[11] = temp2_byte
            temp_data[12] = temp1_byte
            temp_data[13] = 13    
            temp_data[14] = 10    
      else
       if (data_received[2] == "p") then
            if (data_received[3] == "n") then
                gosub sendDataOK
            endif
       else
        if (data_received[2] == "u") then
         gosub blindsUp
         gosub sendDataOK        
        else
         if (data_received[2] == "d") then
          gosub blindsDown
          gosub sendDataOK
         else
          if (data_received[2] == "e") then
           gosub stopBlindsSilent
           gosub sendDataOK
          endif
         endif
        endif
       endif
      endif
     endif
    endif
    if (temp_data[0] == 0) then
        temp_data[0] = "E"
        temp_data[1] = "R"
        temp_data[2] = "R"
        temp_data[3] = "O"
        temp_data[4] = "R"
        temp_data[5] = 13
        temp_data[6] = 10
    endif
endif
enable
GOTO Main_rx
end

disable
intManagement:
        if (INTCON.2 == 1) then
           ticks = ticks + 1      ' Count pieces of seconds
           if ticks = 5 then
                    for interi=0 to payloadLengthD - 1
                        data_received[interi] = 0
                    next interi
           endif                      
           if (counter > 0) then
               counter = counter - 1
               if (counter == 0) then
                    GOSUB stopBlinds
               endif
           endif
           If ticks < 31 Then tiexit
           ticks = 0
           seconds = seconds + 1
           if seconds <= 59 then tiexit
           seconds = 0
           tiexit: 
           INTCON.2 = 0
        endif
        INTCON.7 = 1
resume
enable

stopBlinds:
    low RELAY_DOWN
    low RELAY_UP
    gosub sendCurrentPosition
    currentDirection = 0
return

stopBlindsSilent:
    low RELAY_DOWN
    low RELAY_UP
    currentDirection = 0
return

blindsUp:
    gosub stopBlindsSilent
    pause 100
    high RELAY_DOWN
    low RELAY_UP
    currentDirection = 2
return

blindsDown:
    gosub stopBlindsSilent
    pause 100
    LOW RELAY_DOWN
    HIGH RELAY_UP
    currentDirection = 1
return

sendCurrentPosition:
    temp_data[0] = "l"
    temp_data[1] = "|"
    temp_byte = currentCounter
    gosub convertNoToStr
    temp_data[2] = temp3_byte
    temp_data[3] = temp2_byte
    temp_data[4] = temp1_byte
    temp_data[5] = 13
    temp_data[6] = 10
return

computeCounter:
    disable
    temp_word = timeout_value * temp2_byte
    counter = div32 100
    enable
return

sendDataOK:
    temp_data[0] = "O"
    temp_data[1] = "K"
    temp_data[2] = 13
    temp_data[3] = 10
return

convertInputData:
    conversionSuccess = 0
    TEMP_BYTE="a"
    for ci=0 to 2    
        TEMP1_BYTE = "a"
        TEMP2_BYTE = data_received[i]
        if (TEMP2_BYTE == "|") then return
        GOSUB lookupChar
        if (TEMP1_BYTE == "a") then return 
        if (ci==0) then 
            TEMP_BYTE = TEMP1_BYTE
            conversionSuccess = 1 
        else 
            TEMP_BYTE = TEMP_BYTE*10 + TEMP1_BYTE
            conversionSuccess = 1
        endif
        i = i + 1
    next ci
return

lookupChar:
    LOOKDOWN temp2_byte,["0123456789"], temp1_byte
RETURN

convertNoToStr:
        temp3_byte = (temp_byte DIG 2) + $30
        temp2_byte = (temp_byte DIG 1) + $30
        temp1_byte = (temp_byte DIG 0) + $30
return

setRxAddressPipe:
READ 6, data_out[1]
READ 7, data_out[2]
READ 8, data_out[3]
READ 9, data_out[4]
data_out[5] = device_id
return

setTxAddressPipe:
READ 1, data_out[1]
READ 2, data_out[2]
READ 3, data_out[3]
READ 4, data_out[4]
READ 5, data_out[5]
return
