'@  __config _INTRC_OSC_NOCLKOUT & _WDT_ON & _MCLRE_OFF & _CP_OFF & _CPD_OFF & _FCMEN_OFF & _IESO_OFF & _BOR_ON & _PWRTE_ON

@ DEVICE PIC16F690,INTRC_OSC_NOCLKOUT
@ DEVICE PIC16F690,WDT_ON
@ DEVICE PIC16F690,MCLR_OFF
@ DEVICE PIC16F690,CPD_OFF
@ DEVICE PIC16F690,BOD_ON
@ DEVICE PIC16F690,PWRT_ON

'EEPROM_MAP
'0 - channel number
'1,2,3,4,5 bank name transmitter
'6,7,8,9 bank name device

INCLUDE "RFM73.pbp"

EEPROM  0, [40,"R","E","M","O","T","E","H","O","M",0,0,0,0,0,0]

 DEFINE OSC 8
 DEFINE HSER_RCSTA 90h
 DEFINE HSER_TXSTA 24h
 DEFINE HSER_SPBRG 51
 DEFINE HSER_CLROERR 1

 OSCCON = %01110000 ' Internal 8MHz osc
 ANSEL = 0
 ANSELH = 0
 CM1CON0 = 0
 CM2CON0 = 0
 
'interrupt for timer
INTCON = %11100000
PIE1 = %00100000
OPTION_REG = %00000111

on interrupt goto intManagement
ENABLE
'-----------init----------------------------------------------------------------
TRISA = %00100000 'Set PORTA to all output
TRISB = %00010000 'Set , SDI input
TRISC = %00000100 'Set IRQ input,
WPUA = %11111111
WPUB = %11111111 
resetButton var PORTA.5
i VAR BYTE 'loop counter
j var byte
manageSerial var byte
temp_byte_int var byte
temp_byte var byte
temp_word var word
temp1_byte var byte
temp2_byte var byte
temp3_byte var byte
temp4_byte var byte
ser_data var byte[payloadLength]
backup_data var byte[payloadLength]
conversionSuccessfull var byte
ci var byte
flagRestoreBackedConfig var byte
minutes var byte
resetLabel:
clear
gosub initModule

commonSettings:
GOSUB commonRXTX
'============Main Rx============================================================
Main_rx:
gosub setup_rx 'setup Rx
pause 2 'delay for Rx starting
Ce=1 'set nRF24L01 in Rx mode
irqLoop:
if (resetButton == 0) then
    gosub putDefaultValues
    gosub printConfig
    pause 1000
    goto resetLabel
endif
if (flagRestoreBackedConfig == 2) then
    flagRestoreBackedConfig = 0
    gosub restoreCurrentSettings
    goto commonSettings
endif
if (manageSerial==1) then
    manageserial = 0
    if ((ser_data[0] == "C" OR ser_data[0] == "c") AND ser_data[1] == "=") THEN 'channel
        i=2
        GOSUB convertInputData
        if (conversionSuccessfull == 1) then
            if (temp_byte > 0) then                'not needed
                if (temp_byte < 81) then
                    disable
                    write 0, temp_byte
                    enable
                    gosub printOK
                    GOto commonSettings
                else
                    gosub printError
                endif
            else
                gosub printError
            endif
        else
            gosub printError
        endif
        goto Main_rx
    endif 
    if ((ser_data[0] == "P" OR ser_data[0] == "p") AND ser_data[1] == "=") THEN 'password
            GOSUB savePwd
            GOto commonSettings
    endif
    if ((ser_data[0] == "A" OR ser_data[0] == "a") AND ser_data[1] == "=") THEN 'add device
            i=2
            GOSUB convertInputData
            if (conversionSuccessfull == 1) then
                gosub saveCurrentConfig
                gosub putDefaultValues
                gosub commonRXTX
                gosub debounce
                gosub addNewDevice
                flagRestoreBackedConfig = 2
            else
                gosub printError
            endif
            goto Main_rx
    endif
    if ((ser_data[0] == "S" OR ser_data[0] == "s")) THEN 'print config
        GOSUB printConfig
        goto Main_rx
    else
        i=0
        gosub convertInputData
        if (conversionSuccessfull != 1) then
            gosub printError
            goto Main_rx
        endif
        if (ser_data[i] != "=") then
            gosub printError
        else
            device_id = temp_byte                        
            for j = 0 to payloadLength
                temp_data[j]=ser_data[i + 1]
                if temp_data[j] == 0 then 
                    temp_data[j] = 10
                    goto endCycleS
                endif
                i = i + 1
                if (i==payloadLength) then
                    gosub printError 
                    goto Main_rx
                endif
            next j
            :endCycleS
            if (device_id == 0) then 'default values device -> default values to use...
                gosub saveCurrentConfig
                gosub putDefaultValues
                gosub commonRXTX
                GOSUB sendData
                flagRestoreBackedConfig = 1
                ticks = 0
            else
                GOSUB sendData
            endif
        endif
    endif
    GOTO Main_rx
endif
If Irq !=0 then irqLoop 'wait until IRQ, active low
Ce=0
lop:
disable
gosub ackData
'manage the received data
HSEROUT["+", DEC data_received[1], " "]
for w=2 to payloadLengthD - 1
    HSEROUT[data_received[w]]
    if (data_received[w]) == 10 then goto contInRcv
next w
contInRcv:
enable
GOTO Main_rx
end

disable
intManagement:
        if (INTCON.2 == 1) then
           ticks = ticks + 1      ' Count pieces of seconds
           if (flagRestoreBackedConfig == 1) then
                if (ticks > 10) then
                    flagRestoreBackedConfig = 2
                endif
           endif
           if ticks = 5 then
                    for interi=0 to payloadLengthD - 1
                        data_received[interi] = 0
                    next interi
           endif
           If ticks < 31 Then tiexit
           ticks = 0
           seconds = seconds + 1
           if seconds <= 58 then tiexit
           seconds = 0
           minutes = minutes + 1
           tiexit: 
           INTCON.2 = 0
        else 
            if (PIR1.5 == 1) then
                 if (manageSerial == 1) then mainInt
                 if (RCSTA.2 == 1) then
                    hserin[temp_byte_int]
                 endif
                 HSERIN 100, mainInt, [wait ("AT+"), STR ser_data\payloadLength\10]
                 manageSerial = 1
                 :mainInt
            ENDIF
        endif
        INTCON.7 = 1
resume
enable

cleanSerialPort:
    while (PIR1.5==1) 
        hserin [temp_byte]
    wend
return

'============Subroutines========================================================
printError:
    HSEROUT["ERROR",13,10]
return

printOK:
    HSEROUT["OK",13,10]
return

convertInputData:
    temp_word = 0
    conversionSuccessfull = 0
    labelContReadDecimals:
        if ser_data[i] > 47 then
            if ser_data[i] < 58 then
                conversionSuccessfull = 1
                TEMP_word = TEMP_word*10 + ((ser_data[i]+2)-50)
                i=i+1
                if (TEMP_word < 256) then goto labelContReadDecimals
            endif
        endif
    if (TEMP_word > 255) then
         conversionSuccessfull = 0
    else
        temp_byte = TEMP_word
    endif
return

savePwd:
    for i=2 to 10
        if (ser_data[i] == 0) or (ser_data[i] == 10) or (ser_data[i] == 13) or (ser_data[i] == " ") then 
            GOSUB printError
            return
        endif
    next i
    if (ser_data[2] == ser_data[7]) then
        if (ser_data[3] == ser_data[8]) then
            if (ser_data[4] == ser_data[9]) then
                if (ser_data[5] == ser_data[10]) then
                        GOSUB printError
                        return
                endif
            endif
        endif
    endif
    if (ser_data[11] == 0) then    
        for i=2 to 10
            disable
            write i-1, ser_data[i]
            enable
        next i        
        gosub printOK
    else 
        gosub printError
    endif
return

saveCurrentConfig:
for i=0 to 9
    read i, backup_data[i]
next i
return

restoreCurrentSettings:
for i=0 to 9
    disable
    write i, backup_data[i]
    enable
next i
GOSUB commonRXTX
return

putDefaultValues:
disable
write 0, 40
write 1, "R"
write 2, "E"
write 3, "M"
write 4, "O"
write 5, "T"
write 6, "E"
write 7, "H"
write 8, "O"
write 9, "M"
enable
return

addNewDevice:
'send channel, password, deviceId
device_id = 0
temp_data[0] = "c"
temp_data[1] = "="
for i=2 to 11
    temp_data[i] = backup_data[i-2]
next i
temp_data[12] = temp_byte 'deviceId
temp_data[13] = 13
temp_data[14] = 10
gosub sendData
return

printConfig:
    read 0, temp_byte
    HSEROUT["+Channel:",DEC temp_byte,13,10]
    HSEROUT["+Password:"]
    for i = 1 to 9
        read i, temp_byte
        HSEROUT[temp_byte]        
    next i
    HSEROUT[13,10]
return

setRxAddressPipe:
READ 1, data_out[1]
READ 2, data_out[2]
READ 3, data_out[3]
READ 4, data_out[4]
READ 5, data_out[5]
return

setTxAddressPipe:
READ 6, data_out[1]
READ 7, data_out[2]
READ 8, data_out[3]
READ 9, data_out[4]
data_out[5] = device_id
return
