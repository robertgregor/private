'@  __config _INTRC_OSC_NOCLKOUT & _WDT_ON & _MCLRE_OFF & _CP_OFF & _CPD_OFF & _FCMEN_OFF & _IESO_OFF & _BOR_ON & _PWRTE_ON
                 
@ DEVICE PIC16F690,INTRC_OSC_NOCLKOUT
@ DEVICE PIC16F690,WDT_ON
@ DEVICE PIC16F690,MCLR_OFF
@ DEVICE PIC16F690,CPD_OFF
@ DEVICE PIC16F690,BOD_ON
@ DEVICE PIC16F690,PWRT_ON

'EEPROM_MAP
'0 - channel number
'1,2,3,4,5 bank name transmitter
'6,7,8,9 bank name device
'10 device id
'11 - 0 switch on when applied power 1
'12 timeout 1
'13 - 0 switch on when applied power 2
'14 timeout 2


EEPROM  0, [40,"R","E","M","O","T","E","H","O","M",0,1,0,1,0]

INCLUDE "RFM73.pbp"

 DEFINE OSC 8

 OSCCON = %01110000 ' Internal 8MHz osc
 ANSEL = 0
 ANSELH = 0
 CM1CON0 = 0
 CM2CON0 = 0
 
 'interrupt for timer
    INTCON = %10100000  'T01 enabled PEIE disabled.
    PIE1 = %00000000    'USART disabled
    OPTION_REG = %00000111

on interrupt goto intManagement
ENABLE
'-----------init----------------------------------------------------------------
TRISA = %00000000 'Set PORTA to all output
TRISB = %00110000 'Set , SDI input
TRISC = %00000100 'Set IRQ input
WPUA = %00000000
WPUB = %00100000

RES var PORTB.5
RELAY1 VAR PORTA.4
RELAY2 VAR PORTA.5

i VAR BYTE 'loop counter
j var byte
ci var byte
iint var byte
configure var byte
temp_byte_int var byte
temp_byte var byte
temp1_byte var byte
temp2_byte var byte
temp3_byte var byte
temp4_byte var byte
temp_word var word
EEPROMBYTE      VAR BYTE
EEPROMPOSITION  VAR BYTE
seconds  var     byte    ' Define second variable
ticks   var     word    ' Define pieces of seconds variable
lcounter var byte[3]
conversionSuccess VAR BYTE

startProgram:
clear
input RES
output relay1
output relay2

READ 10, device_id
    READ 11, temp1_byte
    temp_byte = 1
    if (temp1_byte == 0) then
        gosub switchOnRelay
    else
        gosub switchOffRelay
    endif
    READ 13, temp1_byte
    temp_byte = 2
    if (temp1_byte == 0) then
        gosub switchOnRelay
    else
        gosub switchOffRelay
    endif
gosub initModule
commonSettings:
gosub commonRXTX
gosub commonRXTX

'============Main Rx============================================================
Main_rx:
gosub setup_rx 'setup Rx
pause 2 'delay for Rx starting
Ce=1 'set nRF24L01 in Rx mode
irqLoop:
if RES == 0 then
    DISABLE
    write 0, 40
    write 1, "R"
    write 2, "E"
    write 3, "M"
    write 4, "O"
    write 5, "T"
    write 6, "E"
    write 7, "H"
    write 8, "O"
    write 9, "M"
    write 10, 0    
    write 11, 1    
    write 12, 0    
    write 13, 1    
    write 14, 0    
    ENABLE
    pause 1000
    gosub startProgram
endif
'Check for data to send
if (temp_data[0] != 0) then
    if (configure == 1) then
        gosub commonRXTX
        configure = 0
    endif
    gosub sendData
    temp_data[0] = 0
    GOTO main_rx
endif
If Irq !=0 then irqLoop 'wait until IRQ, active low
Ce=0
lop:
data_out[0]=rd_rx_pload 'Read 5 bytes Rx pload
num_byte=payloadLength
gosub spi_read
temp_data[0] = 0
if (data_in[1] == device_id) then
    if (data_in[2] == "c") then    
        if (data_in[3] == "=") then
           'OK it is configure
            for i = 0 to 10
                disable
                write i, data_in[i+4]
                enable
            next i
            read 10, device_id
            pause 250
            configure = 1
            gosub sendDataOK
        endif
    else
     if (data_in[2] == "l") then
        I = 3
        gosub convertInputData
        if (conversionSuccess == 1) then
            temp4_byte = temp_byte 'this is relay number
            if (TEMP_BYTE > 0) then
                if (TEMP_BYTE < 3) then
                    if (data_in[4] == "c") then
                        if (data_in[5] == "o") then
                            disable
                            write 9+(temp4_byte*2), 0
                            enable
                            gosub sendDataOK
                        endif
                        if (data_in[5] == "f") then
                            disable
                            write 9+(temp4_byte*2), 1
                            enable
                            gosub sendDataOK
                        endif
                        if (data_in[5] == "t") then
                            if (data_in[6] == "=") then
                                i = 7
                                gosub convertInputData
                                if (conversionSuccess == 1) then
                                    disable
                                    write 10+(temp4_byte*2), temp_byte
                                    enable
                                    gosub sendDataOK
                                endif
                            endif
                        endif                
                    else
                     if (data_in[4] == "o") then
                        if (data_in[5] == "f") then
                            read 10+(temp4_byte*2), lcounter[temp4_byte]
                            if (lcounter[temp4_byte] == 1) then
                                if (seconds < 40) then lcounter[temp4_byte] = 2
                            endif
                            temp_byte = temp4_byte
                            gosub switchOnRelay
                            gosub sendDataOK
                        else
                            temp_byte = temp4_byte
                            gosub switchOnRelay
                            lcounter[temp4_byte] = 0
                            gosub sendDataOK
                        endif
                     else
                      if (data_in[4] == "f") then
                        temp_byte = temp4_byte
                        gosub switchOffRelay
                        gosub sendDataOK
                      endif
                     endif
                    endif
                endif
            endif
        endif        
     else
      if (data_in[2] == "s") then
        I = 3
        gosub convertInputData
        if (conversionSuccess == 1) then
            temp4_byte = temp_byte 'this is relay number
            if (TEMP_BYTE > 0) then
                if (TEMP_BYTE < 3) then   
                    temp_data[0] = "3"
                    temp_data[1] = "|"
                    if (temp4_byte == 1) then temp_data[2] = RELAY1
                    if (temp4_byte == 2) then temp_data[2] = RELAY2
                    temp_data[2] = temp_data[2] + $30
                    temp_data[3] = "|"
                    read 9+(temp4_byte*2), temp_data[4]
                    temp_data[4] = temp_data[4] + $30        
                    temp_data[5] = "|"
                    read 10+(temp4_byte*2), temp_byte
                    gosub convertNoToStr
                    temp_data[6] = temp3_byte
                    temp_data[7] = temp2_byte
                    temp_data[8] = temp1_byte
                    temp_data[9] = "|"
                    temp_byte = lcounter[temp4_byte]
                    gosub convertNoToStr
                    temp_data[10] = temp3_byte
                    temp_data[11] = temp2_byte
                    temp_data[12] = temp1_byte
                    temp_data[13] = 13    
                    temp_data[14] = 10
                endif
            endif
        endif
      else
       if (data_in[2] == "p") then
        if (data_in[3] == "n") then
            gosub sendDataOK
        endif
       endif
      endif
     endif
    endif
    if (temp_data[0] == 0) then
        temp_data[0] = "E"
        temp_data[1] = "R"
        temp_data[2] = "R"
        temp_data[3] = "O"
        temp_data[4] = "R"
        temp_data[5] = 13
        temp_data[6] = 10
    endif
endif

data_out[0]=Fifo_status 'Read FIFO status
num_byte=1
gosub spi_read
val= data_in[1] 'FIFO status register
if val.0=0 then lop 'test RX_EMPTY=1, RX_FIFO empty
data_out[0]=Write_reg+Stat_us 'reset RX_DR status bit
data_out[1]=%01000000 'write 1 tp RX_DR to reset IRQ
num_byte=1
gosub spi_write
pause 2 'wait 2ms Rx<->Tx
GOTO Main_rx
end

disable
intManagement:
        if (INTCON.2 == 1) then
           ticks = ticks + 1      ' Count pieces of seconds
           If ticks < 31 Then tiexit
           ticks = 0
           seconds = seconds + 1
           if seconds < 59 then tiexit
           seconds = 0
           for iint = 1 to 6
               if (lcounter[iint] > 0) then
                   lcounter[iint] = lcounter[iint] - 1
                   if (lcounter[iint] == 0) then
                        if (iint = 1) then low relay1
                        if (iint = 2) then low relay2
                   endif
               endif           
           next iint
           tiexit:
           INTCON.2 = 0 
        endif
        INTCON.7 = 1
resume
enable

sendDataOK:
    temp_data[0] = "O"
    temp_data[1] = "K"
    temp_data[2] = 13
    temp_data[3] = 10
return

convertInputData:
    conversionSuccess = 0
    TEMP_BYTE="a"
    for ci=0 to 2    
        TEMP1_BYTE = "a"
        TEMP2_BYTE = data_in[i]
        if (TEMP2_BYTE == "|") then return
        GOSUB lookupChar
        if (TEMP1_BYTE == "a") then return 
        if (ci==0) then 
            TEMP_BYTE = TEMP1_BYTE
            conversionSuccess = 1 
        else 
            TEMP_BYTE = TEMP_BYTE*10 + TEMP1_BYTE
            conversionSuccess = 1
        endif
        i = i + 1
    next ci
return

lookupChar:
    LOOKDOWN temp2_byte,["0123456789"], temp1_byte
RETURN

convertNoToStr:
        temp3_byte = (temp_byte DIG 2) + $30
        temp2_byte = (temp_byte DIG 1) + $30
        temp1_byte = (temp_byte DIG 0) + $30
return

switchOnRelay:
    if (temp_byte == 1) then HIGH RELAY1
    if (temp_byte == 2) then HIGH RELAY2
return

switchOffRelay:
    if (temp_byte == 1) then LOW RELAY1
    if (temp_byte == 2) then LOW RELAY2
return

setRxAddressPipe:
READ 6, data_out[1]
READ 7, data_out[2]
READ 8, data_out[3]
READ 9, data_out[4]
data_out[5] = device_id
return

setTxAddressPipe:
READ 1, data_out[1]
READ 2, data_out[2]
READ 3, data_out[3]
READ 4, data_out[4]
READ 5, data_out[5]
return

